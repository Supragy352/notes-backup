{"path":".obsidian/plugins/text-extractor/cache/e56b63f13bea5d8b762573cb3112de3b.json","text":"Real-time Breaking Waves for Shallow Water Simulations Nils Th¨urey 1 Matthias M¨uller-Fischer 2 Simon Schirm 2 Markus Gross 1 1ETH Zurich, Switzerland. thuereyn@inf.ethz.ch, grossm@inf.ethz.ch 2AGEIA Technologies, Switzerland. mmueller@ageia.com, sschirm@ageia.com Abstract We present a new method for enhancing shallow water simulations by the effect of overturning waves. While full 3D ﬂuid simulations can capture the process of wave break- ing, this is beyond the capabilities of a pure height ﬁeld model. 3D simulations, however, are still too expensive for real-time applications, especially when large bodies of wa- ter need to be simulated. The extension we propose over- comes this problem and makes it possible to simulate scenes such as waves near a beach, and surf riding characters in real-time. In a ﬁrst step, steep wave fronts in the height ﬁeld are detected and marked by line segments. These segments then spawn sheets of ﬂuid represented by connected parti- cles. When the sheets impinge on the water surface, they are absorbed and result in the creation of particles repre- senting drops and foam. To enable interesting applications, we furthermore present a two-way coupling of rigid bodies with the ﬂuid simulation. The capabilities and efﬁciency of the method will be demonstrated with several scenes, which run in real-time on today’s commodity hardware. 1 Introduction The ﬁeld of ﬂuid simulations has seen signiﬁcant progress in the past years, particularly with respect to visual accuracy and application to various scenarios, such as inter- actions with different materials, phase changes and multi phase behavior. However, most of the advancements are not available for interactive environments, such as games. The major barrier is the extensive amount of computations necessary for solving a full 3D ﬂuid motion, and tracing the free surface for rendering. An effective way to increase the performance of the sim- ulation of large bodies of liquids is the reduction of the problem from three to two dimensions. Instead of using 3D grid cells, the liquid is represented by a two dimensional height ﬁeld. For calm situations, e.g., with smooth waves, this representation can still capture the main visual proper- ties of the free surface ﬂuid. Other situations, like overturn- ing of waves at the shore line can, however, not be captured with such a reduced model. We propose a new technique to enhance efﬁcient height ﬁeld liquid simulation with particle based sheets, in order to create the effect of breaking waves. As a breaking wave is a highly turbulent process that is still not fully understood, we do not aim to fully simulate this phenomenon in real-time, but to capture its most important visual features. Our approach consists of the following steps: the detec- tion of potentially overturning wave regions, the generation of a ﬂuid sheet to represent the wave, its advection and, ﬁ- nally, the coalescence with the 2D water surface. We rep- resent the breaking wave with connected particles, which allows for the efﬁcient and seamless creation of a surface mesh for rendering. In order to allow further interaction of the ﬂuid with the environment, we apply two-way coupling of the shallow water simulation with rigid bodies. The ca- pabilities of our method will be demonstrated with several test cases, from simple setups of single waves to more real- istic environments such as breaking waves at a submerged shelf, or waves generated by rigid body interaction. 2 Related Work In the early years of ﬂuid animation, procedural surface generation was used to represent breaking waves as de- scribed, e.g., by [6], [18] and more recently by [10]. For the Figure 1. Example of a game character surf- ing along a breaking wave in real-time. Figure 2. Here an overview of our wave simulation approach can be seen. simulation of open water surfaces, such as the ocean, spec- tral methods are often used, see [21], [8] and [14], among others. Two-dimensional water simulations based on height ﬁelds offer more ﬂexibility while keeping computational cost low. The capabilities of a simpliﬁed shallow water discretization for computer graphics were ﬁrst presented in [11]. Furthermore, [17] extended a shallow water simula- tion with particle based splashes. [5] and [2] cover the ba- sics of ﬂoating objects on the water surface. More recent work on shallow water simulations for real-time applica- tions can be found in [12], where the authors apply noise textures for increased surface details, or [7] and [15], where wave simulations using the GPU are demonstrated. Full 3D simulations became popular with the methods developed in [19] and [4], and have by now been extended in numerous ways. Studies of breaking waves have like- wise ﬁrst been performed in 2D [1]. [16] on the other hand presented a full 3D treatment of breaking waves with a Volume-of-Fluid simulation. In [20] the visual impact of breaking waves has been improved by adding particles for sprays and foam. Similar to [16], an approach to use slices of 2D simulations for wave simulations in real-time is demonstrated in [23]. Recently, Full three-dimensional sim- ulations have been combined with two-dimensional tech- niques to speed up simulations of large volumes. In [9], a 2D simulation is performed beneath a layer of full 3D sim- ulation for the ﬂuid surface, while [22] couple the 3D simu- lation region to a 2D shallow water simulation. While these approaches signiﬁcantly lower the simulation time, they are still not suitable for real-time applications. Breaking waves have been simulated in the context of various computational ﬂuid models. In the following we present a method for extending height ﬁeld based simula- tions, such that the motion of breaking of waves can be computed. In particular, we will focus on shallow water simulations, as they yield a full velocity ﬁeld for the ﬂuid surface. In contrast to the spectral methods, they can, on the other hand, not handle the wave dispersion of deep wa- ter waves. It is, however, possible to apply our method to other simulation models that yield a height ﬁeld and veloc- ity vectors at the surface. Our simulation algorithm consists of the following steps: ﬁrst, a normal shallow water sim- ulation step is performed, as will be explained in the fol- lowing section (3). Afterwards, the rigid body coupling of Section 7 is performed. In the next step the detection of overturning waves is handled (as will be explained in Sec- tion 4), and, ﬁnally, the advection of the generated particles is computed (Section 5). 3 Shallow Water Simulations The motivation to use shallow water (SW) simulations is to reduce the complex three dimensional description of a ﬂuid to a simpliﬁed representation: a two dimensional height ﬁeld. The corresponding equations are derived from the equations describing a full three dimensional ﬂuid ﬂow, the Navier-Stokes (NS) equations, by several simpliﬁca- tions. Note that, in the following, we will assume a grav- ity force along the z axis, so the plane for the 2D wave simulations corresponds to the x-y plane. One simplifying assumption is that the velocity does not vary signiﬁcantly along the z axis, and that we have a constant pressure gra- dient from the water surface to the bottom. The only two forces driving the ﬂuid are pressure and gravity. We fur- thermore make the assumption that we want to simulate liq- uids such as water, which effectively have a zero viscosity, and work with the simpler Euler equations. Thus, we can neglect the viscosity term of the NS equations. To simplify the notation, fn will denote the partial derivative of the function f along n, where n can be a spa- tial axis or time. In the following h(x, t) is the height of the water above ground, o(x) describes the bottom topography, and H(x, t) = h(x, t)+o(x) is the total height of water and terrain. The vector u = (u, v) T is the horizontal velocity of the ﬂuid, and g is the gravitational force perpendicular to the 2D simulation plane. The simulation region consists of Nx grid nodes with size ∆x, and Ny grid nodes with size ∆y in x and y direction, respectively. The simpliﬁed shallow water equations can now be written as Ht = −u · ∇H − H(ux + vy) (1) ut = −u · ∇u − ghx , and (2) vt = −u · ∇v − ghy . (3) We use a staggered grid together with a semi-Lagrangian advection step [19] to solve these equations, as desribed by Layton et al. in [13]. As the height in a shallow water sim- ulation is varying, and can be related to the pressure of a normal incompressible ﬂuid solver, solving the SW equa- tions does not require a pressure correction step, such as velocity projection. In comparison to solving only the wave equation for a water surface, a SW simulation, as described above, has the advantage of directly yielding a full velocity ﬁeld for the surface. It can be used to, e.g., trace objects ﬂoating on the surface, and we will make use of it for cou- pling the SW and the rigid body simulations in Section 7. Moreover, SW simulations can be easily extended with a variety of boundary conditions, e.g., for ﬂows through ter- rains, and can capture interesting effects, such as vortices behind obstacles in the ﬂow. 4 Wave Simulation The following section will describe our approach to sim- ulate breaking waves within the shallow water framework. We detect lines of steep wave fronts, and track these with a robust advection scheme. These wave lines generate patches of connected particles representing the ﬂuid of an actual breaking wave. The wave lines adaptively track the original wave, and can merge with others in their neighbor- hood. An overview of our approach is shown in Figure 2. Detection: Typically, a wave breaks when an initially smooth wave approaches a region of shallow water, e.g., a beach. The decreased height of the water causes the braking inﬂuence of the ground to become stronger. The wave steepens, and, at some point, overturns. Especially at beaches this effect is reinforced by the backward current of previous waves, causing a stronger difference between the forward movement of higher ﬂuid layers, and the slower (or backward) movement of ﬂuid layers near the ground. The steepening of waves in regions of decreased ﬂuid height can be reproduced with the shallow water equations. However, The effect of a breaking wave can naturally not be captured within a 2D simulation. The goal of the algo- rithm described in the following is to construct a line L of connected points along each wave front that is a candidate for overturning. To actually detect the front of a steep wave, the gradient of the ﬂuid height has to be larger than a given threshold tH . Moreover, the velocity of the ﬂuid needs to be taken into account, otherwise not only the front, but also the back side of a wave will be detected. At the wave front the ﬂuid velocity opposes the gradient of the height ﬁeld. Hence, as a ﬁrst step we identify a set of points x ∈ Ps in the shallow water grid, that fulﬁll the criterion: |∇H(x)| > tH and ∇H(x) · u(x) < 0 . (4) Here, the gradient of the ﬂuid height ∇H is computed with ﬁnite differences from the height ﬁeld of the shallow wa- Figure 3. Here a top view of the wave front region and line construction is shown. ter simulation. The threshold tH is determined from the actual discretization of the shallow water equations, and a user deﬁned parameter pH . The discretization inﬂuences the resulting shape of the waves by the gravitational force applied during each time step, while the parameter pH can be used to select the overall amount of waves to be gener- ated. In the following we use pH = 1/4, and compute tH as tH = pH g∆t/∆x . (5) The points of Ps usually do not form a closed single layer along the wave front. To generate a sequence of con- nected points for L along the wave front, we enlarge Ps by adding all points that have a distance of less than pd to one of the points in Ps. We have found that a distance of pd = 2∆x yields good results by closing gaps of this scale along the points fulﬁlling Equation (4). As multiple wave regions can be present at a single time step, this broadened set of points is segmented with a ﬂood ﬁlling algorithm to identify disconnected regions. In the following, Pb will de- note such a single set of connected points of the broadened region. We select a random point from Ps, and construct a line by following the tangent vector of the height ﬁeld. On overview of this process is given in Figure 3. This line construction is repeated for both tangent di- rections. With ∇H = (g1, g2), these are given by t1 = (g2, −g1) and t1 = (−g2, g1). The following procedure is ﬁrst applied for one tangent direction, until the next point along this direction is not part of Pb. Then the second part of the line is constructed along the opposing tangent direc- tion. Given a point xn in Pb, the next point x ′ n is computed as x ′ n = xn + ∆x t , (6) where t denotes the current tangent direction. Due to the scaling of the tangent with ∆x, the line L is constructed of points with a distance of the grid size of the simulation. To ensure the relatively large steps of Equation (6) do not by accident leave the region Pb, the next point of L is given by centering x ′ n to the point of the steepest gradient as xn+1 = x ′′ ∈ Lg with max(|∇H(x ′′)|) . (7) Here the line Lg = x ′ n + t∇H(x ′ n) consists of all points along the height ﬁeld gradient at x ′ n that are in Pb. The point xn+1 is added to L and connected to xn. These steps are repeated until xn+1 is not part of Pb. In this case, the process of the line construction is restarted with the second tangent direction if t = t1, or the line is complete for t = t2. Likewise, if xn+1 has a distance less than pd to the ﬁrst point of the line, the line is completed by connecting the two points, resulting in a closed loop. As the points in Ps might also fulﬁll Equation (4) at a subsequent time step, all points of Ps that are within a dis- tance pd to an existing line are removed from the set. This prevents another line from being initialized right next to an existing one. Note that this approach does not deal with branches in the wave front region, but such a case will be handled by the construction of two lines, that might eventu- ally merge (as explained below). Advection: The wave speed for the shallow water equa- tions is given by c = √ gH . (8) However, for the interactive applications that we are target- ing, the shallow water simulation can be distorted by a va- riety of factors, e.g., rigid bodies (as explained below) or other breaking waves. To accurately track the front of a shallow water wave with wave line L, we combine an ad- vection with the wave velocity, and a projection along the gradient direction onto the line of the steepest gradient on the wave front. The projection is performed with the bisec- tion method, and an initial step size of length c. Usually, 2-4 steps sufﬁce to ﬁnd the desired target point. The direction of movement for a point p of L is given by the gradient of the height ﬁeld from the last time step, at time t − ∆t. At this point in time p was located at a correct position on the wave front, either from an initialization of the wave line, or from a previous advection step, and thus up = −∇H(p) is used as the movement direction of p at time t. As the wave crest might have passed p, we ﬁrst perform a projection along up onto the maximum of the ﬂuid height ﬁeld. Once this maximum is found, we perform another forward projection onto the point of the steepest gradient on the wave slope at position p ′. We now ensure that this new point is valid with respect to the original wave speed c. If |p ′ − p| > 2c we remove the point from the line. Likewise, we ensure that this region of the wave is still steep enough to produce a wave. Thus, if |up| < tH /2, the point is also discarded. Figure 4. This picture shows a side view of the wave line vertex advection. Figure 5. Connection shapes for the mesh generation from reﬁned and coarsened wave lines. During its movement, the length of the wave front can change signiﬁcantly. We thus adaptively resample the wave line by introducing new points when the distance between two neighbors is larger than 2∆x. Similarly, points with a distance of less than ∆x/2 are merged. A folding of the line can also be prevented by merging segments where (pn+1 − pn) · (pn−1 − pn) > 0 holds. In both cases the new points are initialized by averaging the properties of the neighboring points. Hence, the resulting wave line consists of segments that have a similar scale as the grid size of the simulation throughout its lifetime. 5 Wave Patch Generation: The ﬂuid sheet of an overturning wave is represented with a wave patch that is built from connected particles gen- erated at the wave line. In time intervals tg a set of particles along the wave line is spawned for each point of the line, adding another layer of quads to the patch. Amongst each other, the particles have the same connectivity as the wave line. If a previous set of particles exists, the new set is con- nected to the previous one. If the same point on the line existed at the generation time of both particle sets, this is trivial. From these one-to-one connections, quads can be easily generated to form a closed surface of the wave patch. If points were added or removed from the wave line, these are marked, and corresponding connection shapes are in- serted to guarantee a closed surface, as shown in Figure 5. To ensure that these three cases are sufﬁcient, we only al- low a single merging or insertion for a point within the time interval tg. For the computation of the velocities of the wave patch particles, we use the velocity of the source point on the line ul. The actual overturning of a wave results in a signiﬁ- cantly higher velocity at the top of the wave than at its bot- tom. We assume that this forward acceleration is propor- tional to the potential energy, in relation to the initial ﬂuid height Hi. Thus, the velocity of a wave sheet particle at position x is given by us = (1 + pvg(H(x) − Hi))ul . (9) Here, pv is a parameter to control the strength of the height inﬂuence. As the wave line tracks the steepest point of the wave front, the generated particles have to be positioned at the wave crest to correctly give the impression of an over- turning wave. The particle generation would be simpliﬁed if the crest of the wave was tracked instead of the front, as is done in our approach. However, the line of the wave crest is not as clearly deﬁned, e.g., for saddle points and saddle lines of the height ﬁeld. Thus, upon creation, the particles of the wave patch are moved to the crest along the inverted wave line velocity −ul. We furthermore subtract tgus from the particle position at the top of the wave, to ensure an overlap of the wave patch and the shallow water surface. This allows a smooth transition from the height ﬁeld values to the wave mesh, as explained below in more detail. Once the ﬂuid represented by the wave patch is detached from the ﬂuid below that represented by the shallow water simulation, its motion is primarily determined by its initial velocity and gravity. Thus, Euler steps are sufﬁcient to inte- grate velocity and position over time. After the update, we perform a collision detection of the particle with the ﬂuid surface of the shallow water simulation. When a collision is detected, we distort the shallow water simulation at the par- ticle position x with H(x) = H(x) − pm, while the eight neighbors of the shallow water node at x are displaced by pm/8. Note that we do not explicitly transport ﬂuid with the wave patches, as a modiﬁcation of the height ﬁeld along the wave front would distort its motion. This leads to noise within the shallow water simulation, unless the modiﬁca- tion along the whole region of the wave is very smooth. As mentioned below, correctly performing this mass transport and smoothing is a topic of future research. Task Duration Shallow water simulation 39.6 % Breaking waves & particle simulation 21.7 % Mesh generation (vertices & normals) 18.9 % Rendering & graphics engine 19.8 % Table 1. Computational requirements of the different parts of our algorithm. Test case Resolution Frames per Second Single waves 1402 43.6 Box interaction 160 · 100 51.8 Submerged shelf 150 · 80 75.2 Surfer 200 · 100 40.6 Table 2. Frames per second measurements for the different test cases. 6 Rendering the Waves For the rendering of a wave patch, its particles with their connectivity can be directly reused as vertices. The wave patches already represent a close surface, which, however, does not have a thickness. Thus, we create two instances of this surface for rendering, and displace the second one downward along the normal direction. To get a closed mesh, the sides of these two meshes are connected with quads. As mentioned above, the intial position of the particles of the wave patch ensures an overlap with the shallow water surface. It correctly represents the top of the wave, while the displacement of the lower side is chosen to represent the mass of the ﬂuid according to the parameter pm. Given a particle x on the wave patch that is used as a vertex for the upper mesh, the position of the corresponding second vertex x ′ is given by x ′ = x + pmn. By observing real breaking waves it can be seen that a wave does not break as a whole at once, but the breaking process starts at a given position. It then spreads outward along the wave front due to the viscosity of the water. To achieve this effect, we select a the mid point of the wave line as the tip of the breaking wave. The wave patches are then generated from an enlarging region centered around the initial point. This is visible in, e.g., Figure 6. In contrast to full 3D simulations, it is furthermore easy to generate texture coordinates for the ﬂuid surface of the wave patch. For a point on the wave line L, it’s texture coordinate is given by its lifetime, and its position in the line. We, e.g., use these texture coordinates to blend in a foam texture at the tip of the wave patch. Finally, to give the impression of a larger scale, we use standard particles. These are generated when the particles Figure 6. Different types of waves created by our method. of the wave patch hit the shallow water surface. Moreover, particles are spawned along the tip of the wave patch. Here, in reality, the drag of the air causes disturbances of the ﬂuid sheet, resulting in the formation of drops. For the pictures shown in this paper, we furthermore use a small scale bump map to distort the reﬂective shallow water surface, which gives the impression of smaller surface waves. 7 Two-Way Rigid Body Coupling A straight forward approach for simulating the interac- tion of rigid bodies with the water surface is to have each body push down the water columns beneath it in order to remove all overlaps. To conserve the water volume, the vol- ume that is added or removed from each column has to be compensated for in other parts of the domain. This method yields nice waves for bodies dragged through the water. The major drawback of the approach, however, is the fact that it cannot handle the situation when a body is pulled beneath the surface and gets fully submerged. In that case, the water does not collapse above it leaving a hole of the size of the body in the surface. The method we propose here is similar but solves the problem of submerged bodies. In addition to the height value h(x) we store a value b(x) at each cell, which repre- sents the water volume that is displaced by one or more rigid bodies. This value does not inﬂuence the simulation di- rectly. At the beginning of a time step the area of each body is projected onto the x-y plane. For each cell at position x that is covered by the projection we compute the new value b(x) as the length along the column at x that is covered by Figure 8. A user interacts with several boxes that were thrown into a simulated basin. rigid bodies. The difference ∆b(x) = b(x, t) − b(x, t − 1) indicates the change in volume covered by bodies between the current and the last time step. This change is distributed to the four direct neighbor cells, similar to algorithms for changing ground depth. Hence, for a grid cell at position x with a neighbor cell at x ′ h(x ′, t + 1) = h(x ′, t) + α ∆b(x) 4 . (10) The positions of the four neighboring cells are given by x + (±∆x, 0) and x + (0, ±∆x), respectively. This way, the water surface closes nicely above the body. The scheme conserves volume even for 0 < α < 1. By changing α the amplitudes of waves generated by bodies can be adjusted. Pulling bodies down or out of the water results in plausi- ble increase and decrease of the water level. The value of ∆b(x) can be positive or negative and give rise to both, the bow wave in front and the wake at the back of a body that is dragged through the water. For a coupling in the other direction, we add a force F of the water displacement and ﬂuid velocity for each of the grid nodes at position x covered by the rigid body: F = hbu(x) + g∆x∆y b(x) ρ , (11) where ρ is a constant to set the density of the ﬂuid. Integrat- ing these forces over the region of the rigid body and over time, will cause the rigid body to ﬂoat or sink depending on its mass, and swim along with the ﬂuid velocities. 8 Results The capabilities of our wave simulation approach are demonstrated with the test cases shown in Figure 6. Each of the three rows of pictures show a breaking wave gener- ated from an initial pulse, which has a height of 3/2Hi in comparison to the overall height Hi. The breaking wave of the upper row of Figure 6 was generated with a box proﬁle aligned with the grid boundary. The wave front is correctly detected and tracked throughout its motion. To demonstrate that our method works regardless of the alignment of the wave, the middle row uses an initial height proﬁle that is Figure 7. A smooth wave approaches a submerged shelf, which results in a steepening of the wave and, eventually, overturning. The ground topography is visible below the shallow water surface. rotated by ten degrees. The lower row of pictures was gen- erated with a square elevation initialized in the middle of the simulation grid. This results in a circular wave that spreads outward. Note that the sharp edge of these three proﬁles re- sults in the detection of several smaller waves in the region behind the main wave front. They are, however, quickly re- moved from the simulation once the steepness criterion of Equation (4) is not met anymore. Images from one of our test simulations with rigid body interaction can be seen in Figure 8. Several boxes are thrown into a basin of ﬂuid, become submerged, are dragged along with the ﬂuid, or ﬂoat on the surface. A user can interact with the simulation by moving around the boxes. The simulation remains stable even during quick movements. A simulation of a breaking wave at a submerged shelf is shown in Figure 7. Test cases with a submerged shelf are common in coastal engineering, and represent the typ- ical topology of a shore area. A simulation of a break- ing wave at a submerged shelf in 3D was demonstrated in, e.g., [3]. With our algorithm we can recreate this phe- nomenon in real-time. Here, an initially smooth wave, that would not break on even ground, is approaching the sub- merged shelf. The decreasing ﬂuid height causes the wave to steepen within the shallow water framework. Eventually, the wave is steep enough to fulﬁll Equation (4), and trig- gers the creation of a breaking wave. Note that the shelf is not fully aligned with the simulation grid, which causes the wave to start breaking further towards the viewer. Finally, we have recreated a game scene of a surﬁng character in Figure 9. Our algorithm yields sufﬁcient de- tail even when the camera is very close to the breaking wave. The details of the breaking wave can be controlled by changing the point distances on the wave line, as this also results in a change of the mesh resolution. A limitation of our approach is that it doesn’t properly handle cases with chaotic waves in the shallow water sim- ulation. This causes the detected breaking waves to be re- moved before they can fully develop. Thus, the algorithm is not suitable for handling situations that would require many small splashes or drops, but targeted towards larger entities like a whole wave. Likewise, small scale waves caused by moving objects, can only be simulated with breaking if they are properly represented within the shallow water simula- tion. The results discussed in this section where calculated on a common PC with an Intel Core 2 Duo CPU (2.13 GHz), and a Nvidia Geforce 7950 GPU. As our implementation is not yet parallelized, it only makes use of one of the cores of the CPU. The actual frame rates of the different cases are given in Table 2. All test cases use between 160k and 200k grid points, and run with 40 to 75 frames per second, including rendering. The distribution of the computational time for the different parts of our algorithm can be found in Table 1. For this measurement a typical wave, as shown in Figure 6, was simulated. Overall, the ﬂuid simulation amounts for 80% of the run time, while the rendering and overhead introduced by the graphics engine require the re- maining 20%. Roughly half of the simulation time is spent on the shallow water simulation itself, while the wave sim- ulation algorithm requires circa one fourth of the time. The creation of the surface mesh and the computation of the nor- mals again requires roughly one fourth of the computations. 9 Conclusions We have presented a new method to perform real-time simulations of open water scenes with breaking waves. It is based on detecting and tracking the wave front with line segments. The breaking wave itself is represented by a patch of connected particles. Our model for coupling a rigid body simulation with the shallow water simulation more- over makes it possible to create interesting interactive ap- plications, and can handle cases such as submerged bodies. Overall, the algorithm performs with high frame rates, and without causing noticeable slowdowns during the course of the simulation. It furthermore allows the efﬁcient and seam- less creation of a textured surface mesh. These properties of the algorithm make it especially interesting and suitable to be used in computer games. Although it is aimed for real- time applications, the algorithm is also interesting for high quality off-line animations. It could, e.g., allow the efﬁcient simulation of large open water shore scenes, while giving Figure 9. A scripted character is moved along the wave front, giving the impression of surf riding. animators real-time feedback during their work. In the future we would like to extend our algorithm by, e.g., detecting collisions between different wave patches, and performing a full smoothed particle hydrodynamics simulation of the splash and foam particles. This would al- low the correct handling of more chaotic or quickly chang- ing scenes. The plausibility of the simulations could also be increased by a model for transporting ﬂuid volumes from the shallow water simulation with the breaking wave and particles. Furthermore, it would be interesting to combine our technique with an adaptive algorithm to create detailed triangulations of the ﬂuid surface and the drops. This would be especially interesting for the off-line simulations men- tioned above. 10 Acknowledgements We thank AGEIA for funding this research project. References [1] G. Chen, C. Kharif, and S. Zaleski. Two-dimensional navier- stokes simulation of breaking waves, 1999. [2] J. X. Chen, N. da Vitoria Lobo, C. E. Hughes, and J. M. Moshell. Real-time ﬂuid simulation in a dynamic virtual environment, 1997. [3] D. Enright, S. Marschner, and R. Fedkiw. Animation and Rendering of Complex Water Surfaces. ACM Trans. Graph., 21(3):736–744, 2002. [4] N. Foster and R. Fedkiw. Practical animation of liquids. In Proc. of ACM SIGGRPAH, pages 23–30, 2001. [5] N. Foster and D. Metaxas. Realistic Animation of Liquids. Graphical Models and Image Processing, 58, 1996. [6] A. Fournier and W. T. Reeves. A simple model of ocean waves. In SIGGRAPH ’86: Proceedings of the 13th an- nual conference on Computer graphics and interactive tech- niques, pages 75–84, New York, NY, USA, 1986. ACM Press. [7] T. R. Hagen, J. M. Hjelmervik, K.-A. Lie, J. R. Natvig, and M. O. Henriksen. Visual simulation of shallow-water waves. Simulation Modelling Practice and Theory, 13, 2005. [8] D. Hinsinger, F. Neyret, and M.-P. Cani. Interactive Anima- tion of Ocean Waves. July 2002. [9] G. Irving, E. Guendelman, F. Losasso, and R. Fedkiw. Efﬁ- cient Simulation of Large Bodies of Water by Coupling Two and Three Dimensional Techniques. ACM Trans. Graph., 25, 2006. [10] S. Jeschke, H. Birkholz, and H. Schmann. A procedural model for interactive animation of breaking ocean waves, 2003. [11] M. Kass and G. Miller. Rapid, Stable Fluid Dynamics for Computer Graphics. ACM Trans. Graph., 24(4):49–55, 1990. [12] T. Klein, M. Eissele, D. Weiskopf, and T. Ertl. Simula- tion, modelling and rendering of incompressible ﬂuids in real time, 2003. [13] A. T. Layton and M. van der Panne. A Numerically Efﬁcient and Stable Algorithm for Animating Water Waves. The Vi- sual Computer, 18/1:41–53, 2002. [14] J. Loviscach. Complex Water Effects at Interactive Frame Rates. Journal of WSCG, 11:298–305, 2003. [15] M. M. Maes, T. Fujimoto, and N. Chiba. Efﬁcient animation of water ﬂow on irregular terrains. In GRAPHITE, pages 107–115, 2006. [16] V. Mihalef, D. Metaxas, and M. Sussman. Animation and Control of Breaking Waves. Proc. of the ACM SIG- GRAPH/Eurographics Symposium on Computer Animation, pages 315–324, 2004. [17] J. F. O’Brien and J. K. Hodgins. Dynamic simulation of splashing ﬂuids. In CA ’95: Proceedings of the Computer Animation, page 198, 1995. [18] D. R. Peachey. Modeling waves and surf. In SIGGRAPH ’86: Proceedings of the 13th annual conference on Com- puter graphics and interactive techniques, pages 65–74, New York, NY, USA, 1986. ACM Press. [19] J. Stam. Stable Fluids. Proc. of ACM SIGGRAPH, pages 121–128, 1999. [20] T. Takahashi, H. Fujii, A. Kunimatsu, K. Hiwada, T. Saito, K. Tanaka, and H. Ueki. Realistic animation of ﬂuid with splash and foam. Computer Graphics Forum, 22 (3), 2003. [21] J. Tessendorf. Simulating Ocean Surfaces. SIGGRAPH 2004 Course Notes 31, 2004. [22] N. Th¨urey, U. R¨ude, and M. Stamminger. Animation of Open Water Phenomena with coupled Shallow Water and Free Surface Simulations. Proc. of the ACM SIG- GRAPH/Eurographics Symposium on Computer Animation, 2006. [23] Q. Wang, Y. Zheng, C. Chen, T. Fujimoto, and N. Chiba. Ef- ﬁcient rendering of breaking waves using mps method, Jun 2006.","libVersion":"0.2.2","langs":""}