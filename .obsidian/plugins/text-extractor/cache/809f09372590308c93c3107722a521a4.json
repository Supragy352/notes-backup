{"path":".obsidian/plugins/text-extractor/cache/809f09372590308c93c3107722a521a4.json","text":"Workshop on Virtual Reality Interaction and Physical Simulation VRIPHYS (2011) J. Bender, K. Erleben, and E. Galin (Editors) SPH Based Shallow Water Simulation Barbara Solenthaler1 Peter Bucher1 Nuttapong Chentanez2 Matthias Müller2 Markus Gross1 1ETH Zurich 2NVIDIA PhysX Research Abstract We present an efﬁcient method that uses particles to solve the 2D shallow water equations. These equations describe the dynamics of a body of water represented by a height ﬁeld. Instead of storing the surface heights using uniform grid cells, we discretize the ﬂuid with 2D SPH particles and compute the height according to the density at each particle location. The particle discretization offers the beneﬁts that it simpliﬁes the use of sparsely ﬁlled domains and arbitrary boundary geometry. Our solver can handle terrain slopes and supports two-way coupling of the particle-based height ﬁeld with rigid objects. An improved surface deﬁnition is presented that reduces visible bumps related to the underlying particle representation. It furthermore smoothes areas with separating particles to achieve better rendering results. Both the physics and the rendering are implemented on modern GPUs resulting in interactive performances in all our presented examples. Categories and Subject Descriptors (according to ACM CCS): I.3.5 [Computer Graphics]: Computational Geometry and Object Modeling—Physically Based Modeling; I.3.7 [Computer Graphics]: Three-Dimensional Graphics and Realism—Animation and Virtual Reality 1. Introduction Physically-based simulations have become an important el- ement of real-time applications like computer games. This is because they increase the plausibility of the simulated materials and give the user the ability to realistically inter- act with the environment. Until now, physical simulations have largely been limited to solid bodies; other materials like ﬂuids have been used with reservation since they pose high computational and methodological challenges to a real- time application. The reason for this is that high-resolution simulations require millions of grid cells or particles with a full 3D Eulerian or Lagrangian ﬂuid simulation, respec- tively. Real-time applications typically reduce the simulated domain from a 3D volume to a 2D surface to reduce the com- putational costs. A popular approach are height ﬁeld ﬂuids where the domain is discretized by 2D grid cells that store the height of the surface at the respective location. A simple technique to simulate surface phenomena like puddles and waves is to solve the wave equation. This approach, how- ever, does not handle bulk ﬂow in the horizontal direction, and therefore effects like swirling rivers and ﬂoating objects cannot be simulated correctly. The shallow water equations (SWE) overcome this problem by incorporating a 2D veloc- ity ﬁeld normal to the water columns. The Eulerian domain decomposition has been widely used in height ﬁeld methods as well as in full 3D simulations. The grid discretization allows for efﬁcient simulations, but handling irregular domain boundaries that are not aligned with the grid accurately and robustly is difﬁcult. Moreover, the grid structure is not well suited to simulate sparse do- mains and water ﬂowing into empty regions. Such effects, however, increase the realism of a virtual world and offer the ability to ﬂexibly interact with the surrounding. In con- trast to the domain decomposition of Eulerian models, the Lagrangian methods discretize the ﬂuid volume by particles that can move to arbitrary locations. Recently, particles have been successfully used in SWE simulations in [LH10]. Lee and Han applied the SPH model to solve the SWE equations, including a one-way coupling of ﬂuids with simple geome- tries represented by virtual particles. In this paper, we extend the particle-based SWE model of Lee and Han [LH10] in order to fully beneﬁt from the advantages of the Lagrangian nature. The main contributions of this paper are: • Extensions of the basic particle-based SWE method that allow the simulation of arbitrary domain boundaries and terrain slopes. • A two-way coupling of the particle-based ﬂuid with rigid bodies, including buoyancy, drag and lift forces. • A surface representation based on the underlying density c⃝ The Eurographics Association 2011. B. Solenthaler et al. / SPH Based Shallow Water Simulation ﬁeld that improves the rendering of low density particle regions. We further present a detailed derivation of the particle-based SWE equations using 2D SPH particles. 2. Related Work 3D simulations of water are well studied in the literature and are used to model complex ﬂow patterns like vortex structures and breaking waves. These simulations come at high costs because they typically require a high-resolution discretization, i.e., millions of cells or particles, to repro- duce small-scale effects. There are many works on full 3D simulation of water, a detailed introduction can be found in [Bri08] for Eulerian simulations and [Mon05] for La- grangian solvers. A common practice to reduce the simulation costs of full 3D simulations while still being able to resolve highly detailed surface features is to reduce the simulation do- main from 3D to 2D. Procedural methods have been used in e.g. [FR86, TDG00, HNC02] to describe ocean waves. These methods do not solve physical models but rather use parametric functions and mathematical descriptions to com- pute the velocity ﬁeld locally. Procedural models can handle large-scale animations efﬁciently, however, the simulation of vortices and object interaction is challenging. The ﬁrst works in computer graphics that simulated the water surface by solving the wave equation on a 2D height ﬁeld are [KM90, Tes99]. The model has been extended to simulate rigid body interaction [OH95], bubbles and droplets [MY97], wa- terfalls [HW04], and terrain erosion [vBBK08]. Recently, [YHK07] introduced a method where 2D particles carrying the velocity and wavefront information are dynamically gen- erated and removed at the surface. The main limitation of the wave equation model is that effects from vortices are not in- cluded, preventing the simulation of whirlpool effects and correct advection of ﬂoating objects. In contrast to the wave equation model, the Shallow Wa- ter Equations (SWE) [LVDP02] include a 2D velocity ﬁeld in addition to the surface height. The equations are derived from the Navier-Stokes equations and describe conservation of mass and momentum. The SWE method has been ex- tended to resolve breaking waves in [TMFSG07] by generat- ing and evolving triangle mesh patches, as well as in [CM10] where particles are dynamically added on top of steep and fast moving wavefronts. The latter work has additionally in- cluded spray and foam particles to simulate waterfalls and object interaction more realistically. The difﬁculty of mod- eling complex boundaries with regular grid approaches has been addressed in [HHL∗05] where a ﬁnite volume method is used to solve the SWE. A particle representation, on the other hand, overcomes these limitations since particles can move to arbitrary lo- cations and can separate from the main body of ﬂuid. In computational ﬂuid dynamics, the particle model Smoothed Particle Hydrodynamics (SPH) has been used to solve the SWE equations to analyze dam breaks and ﬂood hazards. In [AS05], SPH for shallow water simulation has been used on a ﬂat terrain, and stability has been improved by introduc- ing an additional diffusive term. [RPB05] augmented SPH to also store the water depth to reduce the number of parti- cles required in deep water, at the expense of non-constant kernel radii. Anisotropic SPH kernels with variable smooth- ing length are used in [dLTA08] to obtain more numerical accuracy when water spreads out. The particle-based shal- low water method has been introduced to computer graph- ics in [LH10]. Lee and Han have included a one-way cou- pling of particles with solid objects, where the objects are represented by ghost (virtual) particles. Our work is based on the basic concept presented in Lee and Han, but we ad- ditionally include arbitrary terrain boundaries and two-way ﬂuid-solid interaction to make better use of the beneﬁts of the Lagrangian nature. 3. Basic Models Our method solves the shallow water equations on 2D SPH particles. In the following, we give a brief overview of the basic SWE and SPH equations. For detailed derivations and descriptions of both models we refer the reader to [Bri05] for SWE and [DC96, Mon05] for SPH. 3.1. Shallow Water Equations The shallow water equations are derived from the Navier- Stokes equations to describe the evolution of the liquid sur- face given by a 2D height ﬁeld. They represent conservation of volume and momentum and can be written as Dh Dt = −h ∇ · u (1) Du Dt = −g∇(h + H) + aext, (2) where h is the height of the water above ground, u is the 2D horizontal water velocity and g is gravity. In addition to [LH10], we include the height of the terrain H and ex- ternal accelerations aext. For particles moving with the ﬂuid, the material derivative D/Dt turns into the simple derivative d/dt. 3.2. 2D SPH According to SPH, a scalar quantity A of a particle i is inter- polated by a weighted sum of contributions from all neigh- boring particles j: Ai = ∑ j m j ρ j A jW (ri − r j, l), (3) where r is the particle position, ρ j the density of j and W (r, l) the smoothing kernel with ﬁnite support l. Differ- c⃝ The Eurographics Association 2011. B. Solenthaler et al. / SPH Based Shallow Water Simulation ential operators act on the kernels only and are ∇Ai = ∑ j m j ρ j A j∇W (r − r j, l) (4) ∇ 2Ai = ∑ j m j ρ j A j∇ 2W (r − r j, l) (5) ∇ · Ai = ∑ j m j ρ j A j · ∇W (r − r j, l). (6) We use the same kernels as presented for the 3D case in [MCG03] but adapted to 2D: Wpoly6(r, l) = 4 πl8 { (l2 − r2)3 0 ≤ r ≤ l 0 otherwise (7) Wspiky(r, l) = 10 πl5 { (l − r)3 0 ≤ r ≤ l 0 otherwise, (8) Wviscosity(r, l) = 10 9πl5 (9) { −4r3 + 9r2l − 5l3 + 6l3(ln l − ln r) 0 ≤ r ≤ l 0 otherwise. The Laplacian of the ﬁrst two kernels is not positive every- where which can cause stability issues, thus we use the third kernel for computing the viscosity term. We designed the viscosity kernel such that ∇ 2W (r, l) = 40 πl5 (l − r) (10) W (|r| = l, l) = 0 (11) ∇W (|r| = l, l) = 0. (12) We used Equation (9) to determine the correct scaling factor in Equation (10). During the simulation, only the Laplacian of Equation (9) is evaluated. The derivation of the kernel properties is given in Appendix A. 4. Particle-Based SWE Model Our SWE solver uses 2D particles to discretize the surface of a ﬂuid, as shown in Figure 1. In Section 4.1, we ﬁrst derive the Lagrangian shallow water equations in detail and show how they can be solved with SPH. We then explain in Sec- tion 4.2 how arbitrary terrains and water heights can be inte- grated, and show our two-way coupling of the particle-based ﬂuid with rigid objects in Section 4.3. Section 4.4 then dis- cusses how the surface deﬁnition and rendering can be im- proved by addressing the problems coming with the particle representation. 4.1. Particle-Based SWE Equations Our aim is to solve Equations (1) and (2) using 2D SPH par- ticles attached to the ground. In this case, the horizontal 2D velocity ﬁeld is deﬁned by the velocities of the particles as Figure 1: The particle representation facilitates the inter- action with complex and unbounded geometries. The ﬂuid surface is deﬁned by the particles (left) and is rendered in real-time (right). in regular 2D SPH simulations. A straightforward approach would be to store the scalar water height h as an additional attribute on the particles. In this case, one would evaluate the divergence and gradient of the water height appearing in the SWE with the corresponding SPH approximations. The main problem with this simple approach is the right hand side of Equation (2). Imagine two or more particles which store the same height approaching each other. There is no repulsive force between them because the gradient of the height is zero so they can get arbitrarily close to each other. To get good sampling, additional forces would have to be added or the particles would have to be repositioned directly. We solve that problem in a simple way as proposed in [RPB05]. The idea is to deﬁne the height implicitly via the 2D density of the ﬂuid: h = ρ 2D ρ 3D . (13) Assuming the 3D density of the water to be constant, the two quantities are proportional via the constant of proportional- ity 1 ρ 3D . In the remainder of the paper we will use ρ = ρ 2D and ρ0 = ρ 3D. With constant particle masses and normalized kernels, volume conservation is free in this formulation be- cause the integral of the density (height) ﬁeld over the 2D domain is constant: V = ∫ Ω h dr = ∫ Ω 1 ρ0 ρ dr = 1 ρ0 ∫ Ω ∑ j ( m jW (r − r j) ) dr = 1 ρ0 ∑ j m j ∫ Ω W (r − r j) dr = 1 ρ0 ∑ j m j = const. This means that the weak form of Equation (1) holds auto- matically and we do not lose water globally. To guarantee volume conservation locally, the strong form must also hold. c⃝ The Eurographics Association 2011. B. Solenthaler et al. / SPH Based Shallow Water Simulation This is only true in the limit: ∂ ∂t ρi = ∂ ∂t ( ∑ j m jW (ri(t) − r j(t)) ) = ∑ j m j ∂ ∂t W (ri(t) − r j(t)) = ∑ j m j∇W (ri − r j) · (ui − u j) = ui ·∑ j m j ρ j ρ j ∇W (ri − r j) −∑ j m j ρ j u j ρ j · ∇W (ri − r j). Using Equations (4) and (6) and with the kernel size ap- proaching zero we get: ∂ ∂t ρi = u · ∇ρ − ∇ · (ρu) = u · ∇ρ − (∇ρ · u + ρ∇ · u) = ρ∇ · u and with h = 1 ρ0 ρ ∂ ∂t hi = h∇ · u which is Equation (1). Since ρi is deﬁned on the particle, the left hand side above corresponds to the material derivative. The momentum conservation Equation (2) becomes Du Dt = −g∇(h + H) + aext (14) = − g ρ0 ∇ρ − g∇H + aext. (15) This equation is equal to the momentum conservation equa- tion used in regular SPH with stiffness constant k = g ρ0 and with the additional external force −g∇H which acts along the gradient of the terrain. In other words what we have to do is to perform a regular 2D SPH ﬂuid simulation and in- terpret the density as height. The same technique has also been applied in [LH10]. 4.2. Arbitrary Domain Boundaries We deﬁne the terrain by a height map, i.e. a scalar ﬁeld where each scalar denotes the height at discrete positions. The ex- ternal terrain force fterrain i = −g∇Hi (16) acts along the gradient of the terrain. We compute ∇H at each discrete position of our height map with central dif- ferences. This has to be computed only once when initially loading the data. The gradient values are then bilinearly in- terpolated at the particle positions. Very steep and vertical domain boundaries can introduce very large terrain forces. Thus, we use simple geometries to represent the boundary in these cases, and replace the terrain force by a boundary force repulsing a particle whose dis- tance li to the boundary is less than b. We deﬁned the force as fboundary i = αi(fi · n)n, (17) where fi is the sum of all other forces acting on i and n is the normal of the closest point on the boundary. αi is the repulsion strength deﬁned as αi = c(1 − li b ), (18) which is higher the smaller the distance is to the boundary. c is a parameter to control the force intensity; in all our exam- ples we used c = 0.15. 4.3. Rigid Body Interaction Our method considers two-way coupled interaction of particle-based height ﬁelds and rigid objects. 4.3.1. Fluid to Solids The height ﬁeld exerts three forces on a solid, namely buoy- ancy, drag and lift forces. The buoyancy force fbuoyancy = −gρV is proportional to the displaced mass of the ﬂuid ρV and is pointing upward. An object either ﬂoats on the surface or sinks depending on its relative weight as shown in Fig- ure 2. In order to determine the mass of the displaced ﬂuid, we have to compute the fraction of the water column above the particle that is replaced by the solid. For each particle, we cast a ray vertically upwards and compute its bottom- and topmost intersection with the object’s surface di,min and di,max. The immersion depth stored at particle i is deﬁned as di = min(di,max, h) − di,min. (19) The minimum is used to distinguish whether the object is ﬂoating or is fully immersed. The displaced mass is then computed by ˆmi = midi/hi, leading to the buoyancy force per particle f buoyancy i = −g ˆmi. (20) Drag and lift forces are computed analogously to [YHK07] with fdrag i = − 1 2CDA eff i |urel|urel, (21) f lift i = − 1 2CLA eff i |urel|(urel × n × urel |n × urel| ) (22) (23) where CD and CL are drag and lift coefﬁcients, n the surface normal, and urel = uo − ui is the relative velocity between the object and the ﬂuid. Aeff i is the effective area and can be computed with A eff i = { ( n·urel urel α s + (1 − α s))Ai n · urel > 0 0 otherwise. (24) c⃝ The Eurographics Association 2011. B. Solenthaler et al. / SPH Based Shallow Water Simulation Figure 2: Our two-way ﬂuid-solid interaction produces re- alistic waves and ripples at the surface. The left image shows the particles, and the right image the resulting surface. where α s depends on the geometry of the object [YHK07]. The area Ai represents the water column above a particle and is deﬁned by Ai = mi ρ0hi = mi ρi . (25) 4.3.2. Solids to Fluid In contrast to grid-based SWE methods, SPH-based SWE does not allow to modify the height of the ﬂuid due to solids in a simple way. Modifying the height means that particles have to be rearranged such that the resulting SPH densities change accordingly. Since the SPH density computed by ρi = mi ∑ j W (r, l) (26) directly depends on the number of neighbors and their posi- tions, i.e. kernel values, small position changes can already have a large effect on the computed quantity. Thus, we can- not modify particle locations easily and without introducing discontinuities. In the worst case, this can introduce large pressure forces and instabilities. We solve this problem by deﬁning a collision force fcollision based on an elastic collision between the particles and the object. In a fully elastic collision, the new velocity of a particle i is given by u ′ i = miui + mouo − mo(ui − uo) mi + mo , (27) where mo is the mass of the immersed part of the object, and uo is the velocity of the object at the collision point. The collision force applied on a particle is therefore given by fcollision i = β mi u′ i − ui ∆t . (28) 0 ≤ β ≤ 1 deﬁnes the inﬂuence of the object onto the parti- cle. Note that a large value for β could push all particles be- low the object away very quickly, preventing that any buoy- ancy force acts on the object. Our experiments have shown that a value of β = 0.15 produces visually appealing water waves. The effect of the collision force is illustrated in Fig- ure 3. g b Figure 3: Our collision force moves the particles, produc- ing higher density values and thus impact waves. Top: Side view of an object impact. Bottom: Top view of a horizontally moving object. 4.4. Surface Deﬁnition We create a surface map s by combining a modiﬁed density ﬁeld ρ ∗ from the particles with the underlying terrain: s(r) = ρ ∗(r) ρ0 + H(r). (29) This surface map is then used as a vertex displacement map to determine the vertex positions of the ﬁnal surface mesh. The simplest approach is to use the SPH density given by Equation (26) for the rendering. This ﬁeld, however, is un- able to reconstruct a ﬂat surface since bumps related to the particle distribution are well visible. Normalization to allevi- ate these problems cannot be applied because it would result in a constant function ρ(r) = m. We therefore apply the ker- nel smoothing concept to the discrete density (see Figure 4 (a)), which is ρ(r) = ∑ j ρ jW (r − r j, l), (30) and normalize this ﬁeld resulting in ˆρ(r) = ρ(r) ∑ j W (r − r j, l) . (31) The normalized ﬁeld reduces surface bumps, but on the other hand, artifacts at the surface borders are visible (see Figure 4 (b)). In order to get the best of both formulations, ﬂat sur- faces and smoothly declining borders, we smoothly interpo- late between the unnormalized and the normalized density ﬁelds given by Equations (30) and (31) (see Figure 4 (c)): ρ ∗(r) = α ˆρ(r) + (1 − α)ρ(r), (32) where α is determined by α = ρ(r)−ρmin(r) ρmax(r)−ρmin(r) ∈ [0..1], and ρmin(r) and ρmax(r) are the minimal and maximal density value in the neighborhood of r. With the particle representation, water ﬂowing into empty regions can be simulated in a straightforward way. However, in such cases it might happen that individual particles sepa- rate and appear as large blobs in the rendered result as shown c⃝ The Eurographics Association 2011. B. Solenthaler et al. / SPH Based Shallow Water Simulation Figure 4: We smoothly interpolate between the unnormal- ized (top) and normalized density ﬁeld (middle) to get the best of both formulations: Smoothly declining borders and ﬂat surfaces (bottom). Figure 5: Particles that separate from the main ﬂow are rendered as large blobs. To improve the rendering in these situations, we smooth the density ﬁeld over a larger area. in the left image in Figure 5. We solve this problem by de- tecting such low density areas in the ﬂuid and smoothing the density ﬁeld in these situations. This is achieved by in- creasing the kernel size in Equations (30) and (31) with de- creasing density. To this end, we have deﬁned two density thresholds, ρ1 = 30 and ρ2 = 150, in between the kernel ra- dius l is increased linearly up to a maximum size which we have set to 3l in all our examples. Note that variable kernel sizes are only used for rendering. The effect is shown in the right image of Figure 5. 5. Results and Discussion We implement our method in CUDA and run the simula- tions on a 2.66 GHz Core i7 and NVIDIA GTX 460. We used NVIDIA’s PhysX SDK for the rigid body dynamics. We have used two different setups to measure the perfor- mance, the basin and the whirlpool scenarios shown in Fig- ure 6. Table 1 lists the performance values of both exam- ples with increasing particle numbers as well as increas- ing number of rigid objects. We used a time step of 0.002s in these examples. The timings are given in fps, once for the physics computation only, and once including the ren- dering after each physics step. The performance data show that we can simulate and render 128k particles at an interac- tive rate of 20fps. With the same number of particles but adding 196 objects, the frame rate decreases to 7fps. We note that the particle-based SWE formulation does not reach the same performance as the grid-based SWE models. How- ever, the particle-based approach offers many beneﬁts over grid-based solvers like the simple handling of complex and sparsely ﬁlled domains. The choice of a particular solver should therefore depend on the designated simulation scene and application. The beneﬁts of the particle representation is demonstrated in the following examples. In all of them, we achieved inter- active performances. In Figure 7, the ﬂuid is interacting with non-axis aligned boundaries which a user dynamically re- moves causing the water to ﬂow out. The interaction with a complex terrain boundary is shown in Figure 1 and 8. We used height maps of sizes 512x512 and 256x256, respec- tively. In the latter example, the solid objects get advected by the river which is discretized by 100k particles in total. Due to the chosen camera positions, however, only about 15k particles are visible in the particular screenshots. The rigid objects either ﬂoat or sink depending on their weight, in both cases producing realistic waves and ripples. If not stated otherwise, we used our real-time OpenGL renderer in all our examples. The result of our real-time renderer is vi- sually compared to the ofﬂine Povray raytracer in Figure 8. One drawback of our method is that several parameters have to be set, each of them inﬂuencing the visual result of the simulation. While this offers a high degree of artis- tic freedom to an animator, it can also be a tedious process to achieve the desired result. We have determined the param- eters once as stated in the corresponding sections, and used these values to produce all our examples. While our surface deﬁnition accounts for a smooth ren- dering of low density regions, it would be desirable to con- trol the actual number of particles in a certain region dy- namically. This is mainly important in simulations with un- bounded domains to guarantee a minimal particle sampling rate. This could be achieved by locally adjusting the reso- lution with particle splitting and merging processes, analo- gously to the idea presented in [APKG07] for 3D SPH sim- ulations. The problem is, however, to change the resolution c⃝ The Eurographics Association 2011. B. Solenthaler et al. / SPH Based Shallow Water Simulation Figure 6: The basin (left) and whirlpool (right) examples are used to evaluate the performance of our method pre- sented in Table 1. Figure 6 #particles #objects physics [fps] physics + rendering [fps] 16k - 629 120 32k - 317 86 Basin (left) 64k - 131 55 128k - 41 20 16k 16 254 73 32k 36 144 39 Whirlpool (right) 64k 81 62 18 128k 196 21 7 Table 1: Performance values of two different examples, measured for various particle and object numbers. locally in a stable way, avoiding artifacts at the surface as well as abrupt momentum changes. 6. Conclusions and Future Work We have presented a new approach for simulating height ﬁeld ﬂuids based on 2D SPH particles. Discretizing the height ﬁeld with particles offers many beneﬁts over tradi- tional grid-based approaches, namely the simple handling of complex and sparsely ﬁlled domains. This allows the inter- action of a user with the ﬂow and the environment in a more ﬂexible way. Our surface representation is modeled so that we avoid visual artifacts related to the underlying particle distribution. There are several ways to further improve the visual ap- pearance of the ﬂuid. First, splashes, foam and waterfall effects could be modeled, for example by including sim- ple particle systems as in [CM10]. And second, our method could be extended to allow the dynamic insertion and dele- tion of particles to guarantee a minimal particle sampling rate. Dynamically changing the particle number in a stable way is, however, a difﬁcult task and needs further studies in the future. References [APKG07] ADAMS B., PAULY M., KEISER R., GUIBAS L. J.: Adaptively sampled particle ﬂuids. ACM Trans. Graph. (Pro- ceedings of SIGGRAPH) 26, 3 (2007), 48–54. 6 [AS05] ATA R., SOULAIMANI A.: A stabilized SPH method for Figure 7: Individual walls are dynamically removed by a user, causing the ﬂuid to ﬂow into empty domain regions. Figure 8: A dam built of several logs collapses, resulting in the ﬂuid and the debris to ﬂow down the valley. An un- bounded domain is used, and the particles can ﬂow to ar- bitrary locations. The bottom row shows different rendering techniques; on the left the surface is rendered ofﬂine with Povray, and on the right we used our real-time OpenGL ren- derer. inviscid shallow water ﬂows. International Journal for Numeri- cal Methods in Fluids 47 (2005), 139–159. 2 [Bri05] BRIDSON R.: Shallow water discretization, Lecture notes Animation Physics, 2005. University of British Columbia. 2 [Bri08] BRIDSON R.: Fluid Simulation for Computer Graphics. A K Peters, 2008. 2 [CM10] CHENTANEZ N., MÜLLER M.: Real-time simulation of large bodies of water with small scale details. In Proceedings of ACM SIGGRAPH / EUROGRAPHICS Symposium on Computer Animation (2010). 2, 7 [DC96] DESBRUN M., CANI M.-P.: Smoothed particles: A new paradigm for animating highly deformable bodies. In 6th Euro- graphics Workshop on Computer Animation and Simulation ’96 (1996), pp. 61–76. 2 [dLTA08] DE LEFFE M., TOUZÉ D. L., ALESSANDRINI B.: SPH c⃝ The Eurographics Association 2011. B. Solenthaler et al. / SPH Based Shallow Water Simulation modeling of shallow-water coastal ﬂows. In Proceeding of the 8th International Conference on Hydrodynamics (2008). 2 [FR86] FOURNIER A., REEVES W. T.: A simple model of ocean waves. In Proceedings of SIGGRAPH (1986), pp. 75–84. 2 [HHL∗05] HAGEN T., HJELMERVIK J., LIE K.-A., NATVIG J., HENRIKSEN M. O.: Visual simulation of shallow-water waves. Simulation Modelling Practice and Theory 13, 8 (2005), 716 – 726. 2 [HNC02] HINSINGER D., NEYRET F., CANI M.-P.: Inter- active animation of ocean waves. In Proceedings of ACM SIGGRAPH/Eurographics Symposium on Computer Animation (2002), pp. 161–166. 2 [HW04] HOLMBERG N., WÜNSCHE B. C.: Efﬁcient modeling and rendering of turbulent water over natural terrain. In Proceed- ings of GRAPHITE (2004), pp. 15–22. 2 [KM90] KASS M., MILLER G.: Rapid, stable ﬂuid dynamics for computer graphics. In Proceedings of SIGGRAPH (1990), pp. 49–57. 2 [LH10] LEE H., HAN S.: Solving the shallow water equations using 2d sph particles for interactive applications. The Visual Computer 26, 6-8 (2010), 865–872. 1, 2, 4 [LVDP02] LAYTON A. T., VAN DE PANNE M.: A numerically efﬁcient and stable algorithm for animating water waves. The Visual Computer 18 (2002), 41–53. 2 [MCG03] MÜLLER M., CHARYPAR D., GROSS M.: Particle- based ﬂuid simulation for interactive applications. In Proceed- ings of the ACM Siggraph/Eurographics Symposium on Com- puter Animation (2003), pp. 154–159. 3 [Mon05] MONAGHAN J. J.: Smoothed Particle Hydrodynamics. Rep. Prog. Phys. 68 (2005), 1703–1759. 2 [MY97] MOULD D., YANG Y.-H.: Modeling water for computer graphics. Computers & Graphics 21, 6 (1997), 801 – 814. 2 [OH95] O’BRIEN J. F., HODGINS J. K.: Dynamic simulation of splashing ﬂuids. In Proceedings of Computer Animation (1995), pp. 198–205. 2 [RPB05] RODRIGUEZ-PAZ M., BONET J.: A corrected smooth particle hydrodynamics formulation of the shallow-water equa- tions. Comput. Struct. 83 (2005), 1396–1410. 2, 3 [TDG00] THON S., DISCHLER J.-M., GHAZANFARPOUR D.: Ocean waves synthesis using a spectrum-based turbulence func- tion. In Proceedings of CGI (2000), p. 65. 2 [Tes99] TESSENDORF J.: Simulating ocean water. SIGGRAPH course notes (1999), 8. 2 [TMFSG07] THUREY N., MULLER-FISCHER M., SCHIRM S., GROSS M.: Real-time breaking waves for shallow water simula- tions. In Proceedings of Paciﬁc Conference on Computer Graph- ics and Applications (2007), pp. 39–46. 2 [vBBK08] ŠT’AVA O., BENEŠ B., BRISBIN M., K ˇRIVÁNEK J.: Interactive terrain modeling using hydraulic erosion. In Proceed- ings of ACM SIGGRAPH/Eurographics Symposium on Computer Animation (2008), pp. 201–210. 2 [YHK07] YUKSEL C., HOUSE D. H., KEYSER J.: Wave par- ticles. ACM Transactions on Graphics (Proceedings of SIG- GRAPH) 26, 3 (2007), 99. 2, 4, 5 Appendix A: Derivation of the Viscosity Kernel Properties In the following, the scaling factor in Equation (10) is derived, satisfying the properties given in Equations (11) and (12) as well as the unity constraint. In polar coordinates and for symmetric functions, the Laplacian is ∆ f = 1 r ∂ ∂ r ( r ∂ f ∂ r ) (33) So ∂ f ∂ r = 10 9πl5 ( −12r2 + 18lr − 6l3 1 r ) r ∂ f ∂ r = 10 9πl5 ( −12r3 + 18lr2 − 6l3) ∂ ∂ r ( r ∂ f ∂ r ) = 10 9πl5 ( −36r2 + 36lr) 1 r ∂ ∂ r ( r ∂ f ∂ r ) = 10 9πl5 (−36r + 36l) ∆ f = 40 πl5 (l − r) and f (l) = 10 9πl5 ( −4l3 + 9l3 − 5l3 + 6l3(ln l − ln l) ) = 0 and ∂ f ∂ r \f \f \f \f l = 10 9πl5 ( −12r2 + 18lr − 6l3 1 r )\f \f \f \f l = 10 9πl5 ( −12l2 + 18l2 − 6l2) = 0 and ∫ r Wviscosity(r, l)dr = ∫ 2π 0 ∫ l 0 10 9πl5 ( −4r3 + 9r2l − 5l3 + 6l3(ln l − ln r) ) r dr dϕ = 20π 9πl5 [ − 4 5 r5 + 9 4 lr4 − 5 2 l3r2 + 6l3 ( 1 2 r2 ln l − ( 1 2 r2 ln r − 1 4 r2) )]l 0 = 1 9l5 ( −16l5 + 45l5 − 50l5 + 6l3(5l2) ) = 1 c⃝ The Eurographics Association 2011.","libVersion":"0.2.2","langs":""}