{"path":".obsidian/plugins/text-extractor/cache/8b572206824088d141df6561d493a82d.json","text":"Eurographics/ ACM SIGGRAPH Symposium on Computer Animation (2014) Vladlen Koltun and Eftychios Sifakis (Editors) Strain Based Dynamics Matthias Müller Nuttapong Chentanez Tae-Yong Kim Miles Macklin NVIDIA Figure 1: From left to right: Tight skirt in the bind pose. Causing problems in poses that differ signiﬁcantly from the bind pose. Lowering the overall stiffness results in sagging of the dress. Lowering the stiffness anisotropically along the horizontal direction solves the problem. Abstract We propose a new set of constraints within the Position Based Dynamics (PBD) framework that allow the control of strain in directions that are independent of the edge directions of the simulation mesh. Instead of constraining distances between points, we constrain the entries of the Green - St Venant strain tensor. Varying the stiffness values corresponding to the individual strain coefﬁcients lets us simulate anisotropic behavior. By working with Green’s rotation-independent, non-linear strain tensor directly we do not have to perform a polar decomposition of the deformation gradient as in most strain limiting approaches. In addition, we propose a modiﬁcation of the constraints corresponding to the diagonal entries of the strain tensor such that they can be solved in a single step and a modiﬁcation of the constraints corresponding to the off-diagonal entries to decouple stretch from shear resistance. By formulating the constraints within the PBD framework, they can be used not only for strain limiting but to perform the actual simulation of the deformable object whereas traditional strain limiting methods have to be paired with a separate simulation method. Categories and Subject Descriptors (according to ACM CCS): I.3.5 [Computer Graphics]: Computational Geometry and Object Modeling—Physically Based Modeling I.3.7 [Computer Graphics]: Three-Dimensional Graphics and Realism—Animation and Virtual Reality 1. Introduction Position Based Dynamics [MHR06] has become a popular method for simulating cloth and soft bodies both in games and the ﬁlm industry due to its simplicity, speed and robust- ness. Traditionally, meshes are simulated by constraining the distances along edges and bending angles. This approach controls strain only along the directions of the edges of the c⃝ The Eurographics Association 2014. Matthias Müller Nuttapong Chentanez Tae-Yong Kim Miles MacklinNVIDIA / Strain Based Dynamics mesh. The same is true for mass spring systems, the corre- sponding force based method. In the force based framework the Finite Element (FEM) formulation removes this depen- dency and allows the speciﬁcation of stiffness values in di- rections that are independent of the tesselation. Our goal was to come up with a set of constraints that achieve the same in the position based framework. Instead of constraining edge lengths, we constrain the entries of the Green - St Venant strain tensor induced by the deformed particle positions. Unlike FEM which derives stresses from strains, integrates the deformation energy and derives forces, we work with the strain directly by deriving positional constraints for each entry of the strain tensor. Being able to control strain along pre-deﬁned directions independent of the triangulation is useful in a variety of sce- narios. For instance, the stiffness of cloth typically varies along the warp and weft directions with relatively low shear- ing resistance. Often, artists provide animations with frames in which the clothing is more stretched than in the bind pose. Having the solver enforce the bind pose dimensions can cause collision issues and problematic conﬁgurations as shown in Figure 1. Reducing the stiffness an-isotropically yields stretchy cloth while reducing stiffness horizontally only solves the problem nicely. This behavior can be ap- proximated by using edge constraints and regular triangu- lations that are aligned with the warp and weft directions. In practice, however, characters are often not designed with cloth simulation in mind. Moreover, diagonal edges in regu- lar meshes still couple strain modes that should be indepen- dent. Simulating a skin layer with a tetrahedral mesh is a second example in which mesh independent strain control is useful. Here skin sliding can be simulated by lowering the shear resistance along the surface of the character (see Fig. 5). Locking is a third problem that can be addressed with our approach. It refers to the fact that perfectly constraining the edge lengths of a triangle mesh prevents it from being bent in general directions. English et al. [EB08] solve this problem by using non-conforming triangles. Since a non-conforming mesh is not suitable for collision handling, two meshes are necessary for simulation. Goldenthal et al. [GHF∗07] only constrain the edges of a regular quad mesh to prevent lock- ing. With out method, we achieve the same effect on arbi- trary triangle meshes by reducing the shear stiffness only. Our main contributions are • Deriving PBD constraints from constraining the entries of the strain tensor to simulate deformable objects. • Using Green’s rotation-independent strain tensor instead of the Cauchy strain tensor and a polar decomposition of the deformation gradient. • A modiﬁcation of the diagonal constraints such that they can be solved in a single step. • A modiﬁcation of the off-diagonal constraints to decouple stretch from shear resistance. 2. Related Work Since Müller et al. introduced Position Based Dynamics in [MHR06], various improvements have been proposed. Kubiak et al. [KPGF07] extended the method to simulate threads in surgical simulation. Müller [Mül08] introduced hierarchical PBD to reduce cost of simulating high reso- lution meshes. A new bending model for triangle meshes was devised by Kelager et al. [KNE10] and a new volume conservation constraint by Diziol et al. [DBB11]. Kim et al. [KCMF12] and Müller et al. [MKC12] studied the special case of one dimensional rods for hair and fur simulation and proposed fast ways to enforce inextensibility. For a survey on position based methods we refer the reader to [BMOT13]. The idea of using the strain components for cloth simu- lation was explored by Baraff and Witkin in [BW98] in a force based setting. We generalize this idea and apply it to cloth and tetrahedral objects in a position based framework. Strain limiting in force based approaches is closely related to PBD. Here, the positions or the velocities of the vertices are manipulated directly after each force based simulation step. In contrast to our approach, strain limiting only kicks in when material is overstretched while we use the strain components to do the actual simulation of the material. On the other hand, our method could be used in a force based setting for strain limiting as well. Provot [Pro95] and Bridson et al. [BMF03] proposed to constrain the length of springs to not stretch or compress be- yond a given limit in the context of mass spring simulations. Hong et al. [HCJ∗05] use an implicit formulation to allow for larger time steps. To increase the convergence rate Gold- enthal et al. [GHF∗07] used a global solver to constrain edge lengths of a regular quad mesh to upper limits. In the context of Finite Element Method (FEM), Picin- bono et al. [PDA03] limit strain anisotropically by adding an energy term to penalize strain in certain directions. Perez et al. [PCH∗13] used Lagrange multipliers to constrain strain components isotropically. Hernandez at el. [HCPO13] im- prove this method to support anisotropic material. The two most closely related methods are the ones pro- posed by Thomaszewski et al. [TPS09] and Wang et al. [WOR10]. Therefore we discuss the differences in a bit more detail. Both work on single elements and solve globally us- ing either Gauss-Seidel or Jacobi iterations as we do. Wang et al. [WOR10] limit strain isotropically. Their method is an extension of the strain limiting approach of Tsiknis at al. [Tsi06]. Wang et al. extract the principal strains from the deformation gradient of an element using a polar decomposition. Next, they clamp the principal strains and c⃝ The Eurographics Association 2014. Matthias Müller Nuttapong Chentanez Tae-Yong Kim Miles MacklinNVIDIA / Strain Based Dynamics compute a new clamped deformation gradient. This new gra- dient is then used to transform the initial shape of the el- ement again to get the target shape. In contrast, we com- pute different position correction vectors for each individual shear and stretch mode which we combine using different scaling factors to simulate anisotropic behaviour. Thomaszewski et al. [TPS09] work with Cauchy’s lin- ear strain tensor and extract the rotational part of the de- formation gradient using a polar decomposition. With linear strain, the strain components depend linearly on the veloc- ities of the adjacent vertices. Specifying the strain compo- nents yields a 6 × 6 linear system for the 3 × 2 velocity com- ponents of a triangle which has to be solved for each element in addition to performing a polar decomposition. This com- putation can be sped up by pre-computing the inverse of a 5 × 5 sub block which requires storing 25 ﬂoats per triangle, however. In the tetrahedral case, the linear system becomes 12 × 12 dimensional while in our case, processing tetrahe- dral elements is not much slower than handling triangles as our results show. In both methods, attachments have to be handled sepa- rately. In the method of Thomaszewski et al. the linear sys- tem becomes over-constrained and has to be solved as a least squares problem. In contrast, in the PBD framework, vertices are simply attached by setting their inverse mass to zero. 3. Method We will now derive the new strain-based position constraints that replace the traditional distance constraints. For the sake of completeness, we brieﬂy recap the basic concepts of PBD ﬁrst. 3.1. Basic PBD Let us assume we have N particles with positions xi, veloci- ties vi and inverse masses wi. The main PBD simulation loop has the following form: initialize xi and vi while simulating do vi ← vi + ∆t fi pi ← xi + ∆t vi pi ← solve (pi) vi ← (pi − xi)/∆t xi ← pi end In the simulation loop, after updating the velocities, pre- dicted positions pi are computed using an explicit Euler step. These positions are modiﬁed by a solver to meet a set of po- sitional constraints C j. A positional constraint can be deﬁned by a scalar function C(p1, . . . pN ) that is zero when the con- straint is satisﬁed. The solver iterates multiple times over all constraints in a Gauss-Seidel type fashion solving the sys- tem of non-linear equations. For a single constraint C, the positional corrections ∆pi for point i is computed as ∆pi = −s k wi ∂ ∂ pi C(p1, . . . pN ), (1) where s = C(p1, . . . pN ) ∑ j w j \f \f \f ∂ ∂ pi C(p1, . . . pN ) \f \f \f 2 (2) and k ∈ [0, 1] stiffness parameter. The coefﬁcient k is not a true physical stiffness coefﬁcient because its effect is time step and iteration count dependent. However, in games where both are typically constant, k is an intuitive and easy to tune parameter. The equations above result from a local linearization of the constraint function at the current particle conﬁguration. What makes PBD so robust is the fact that the linearization is updated before each constraint projection and not held ﬁxed as with global solvers. After the solve, the velocities and positions are updated based on the modiﬁed predicted po- sitions. To give an example, C(x1, x2) = |x1 − x2| − d con- strains the distance between particles 1 and 2 to be d. Plug- ging this constraint function into Eq. (1) and Eq. (2) yields the intuitive corrections ∆p1 = − w1 w1 + w2 (|p1 − p2| − d) p1 − p2 |p1 − p2| (3) ∆p2 = + w2 w1 + w2 (|p1 − p2| − d) p1 − p2 |p1 − p2| (4) 3.2. Tetrahedral Constraints We will now turn to our new constraints. Our basic idea ap- plies to both triangle and tetrahedral meshes. Let us ﬁrst con- sider a single tetrahedron. Instead of using constraints on the edges that control the pairwise distances of the particles, we derive constraints that involve all four particles and drive the conﬁguration to a state in which the components of Green’s strain tensor assume given values. To formulate these con- straints we need the expressions of the strain components in terms of the positions of the four particles adjacent to the tetrahedron. Let q0, q1, q2, q3 be their material positions and p0, p1, p2, p3 the corresponding world positions. Since trans- lation does not contribute to strain we can assume that q0 and p0 are zero. Then, with P = [p1, p2, p3] and (5) Q = [q1, q2, q3] (6) we can express the deformation gradient as F = PQ −1 (7) and the Green - St Venant strain tensor as G = F T F − I (8) c⃝ The Eurographics Association 2014. Matthias Müller Nuttapong Chentanez Tae-Yong Kim Miles MacklinNVIDIA / Strain Based Dynamics Figure 2: Constraint values and projection vectors for the white vertex moving in the plane with the other two vertices are attached. The three columns show x-, y- and shear strain (green positive, red negative, clamped). On the top row we used the standard strain functions S11 − 1, S22 − 1 and S12. The bottom row depicts our modiﬁed constraints functions √ S11 − 1,√ S22 − 1, and S12/|fi||f j|. Note that the zero sets are unchanged. In contrast to the top row, the x- and y- constraints are solved with a single step because the gradient is constant along the projection direction. The modiﬁed shear function tilts the projection vectors to decouple shear from stretch resistance. where I is the identity matrix. We dropped the factor 1 2 in the original deﬁnition of Green’s strain tensor because it cancels out in our constraint formulation. The matrix Q−1 is con- stant and can be pre-computed. The diagonal entries of Gii represent stretch and the off- diagonal entries Gi j = G ji shear both with respect to the main axes in the material frame. We now introduce the three stretch and three shear constraint functions C(p0, p1, p2, p3) = Sii − s2 i (9) C(p0, p1, p2, p3) = Si j i < j, (10) where S = FT F and si rest stretches, typically equal to 1. These constraints pull the particles towards states of zero stretch and zero shear. Associating separate stiffness coef- ﬁcients ki j with each constraint lets us simulate anisotropic material. Note that no rotation matrices have to be estimated via polar decomposition as in most strain limiting methods because rotational independence is built into the deﬁnition of Green’s strain tensor. 3.3. Triangle Constraints For triangles the corresponding matrices P and Q are not square because the number of particles is reduced by one but the dimensionality of the particle positions stays the same so Q−1 is not deﬁned. This problem can be solved by the natural choice of deﬁning the rest state of the triangles via two dimensional texture coordinates on the triangle mesh. To properly simulate anisotropic cloth behavior the texture co- ordinates must be aligned with the weft and warp directions of the cloth. Now Q becomes a 2 × 2 dimensional matrix and Q−1 is well deﬁned. The deﬁnition S = Q−1T P T PQ −1 (11) is valid too with S, Q ∈ R2×2 and P ∈ R3×2. Note that the strain based constraints for tetrahedra and triangles are ag- nostic to reﬂections which will be considered in Section 3.7. 3.4. The Square Root of Strain Although these are natural deﬁnitions of the constraint func- tions, there is a more stable way to formulate the stretch con- straints in Eq. (9). To see this, let us have a look at a simple distance constraint with rest length d between two points. The two constraint functions C(p1, p2) = |p1 − p2| − d and (12) C(p1, p2) = |p1 − p2| 2 − d2 (13) are both valid. However, the ﬁrst function is linear along p1 − p2 while the second is not. This means that the lineariz- ing constraint projection of PBD can solve the ﬁrst constrain perfectly in one step. This is not true for the second con- straint function which corresponds to our measure of stretch. c⃝ The Eurographics Association 2014. Matthias Müller Nuttapong Chentanez Tae-Yong Kim Miles MacklinNVIDIA / Strain Based Dynamics Figure 4: Varying soft body stiffness parameters. Figures (a) - (d) show the recovery of a torus from a heavily entangled state by increasing the volume stiffness. For (e) we reduced all but the volume conservation stiffness values. As a result, the torus heavily deforms but its volume is conserved. Figure (f) shows the result of only softening the volume stiffness and the stiffness along the main axis of the torus. The result of high shear and low stretch resistance is shown in Figure (g) where angle distortion is small while the shape is stretched. Figure (h) shows the opposite conﬁguration. Here, stretching is small while the torus bends heavily. The problem can easily be ﬁxed by replacing Eq. (9) by C(p0, p1, p2, p3) = √Sii − si. (14) With this modiﬁcation, the stretch constraint of an element is solved correctly with a single projection step because the gradient of the constrain function is constant along the projection direction as the bottom images of the ﬁrst two columns of Fig. 2 show. For a derivation of the position cor- rections based on the proposed constraints see the Appendix. This modiﬁcation reduces the relative remaining stretch with the same number of solver iterations by 25% on average. More importantly, it increases the stability of the simulation because it prevents overshooting. 3.5. Decoupling Shear from Stretch The shear constraint function Si j can be written as Si j = fi · f j, where fi and f j are the ith and jth column vectors of F. However, this function not only penalizes the angle between the axes of the deformed coordinate system, i.e. the dot prod- uct of the column vectors, but also the principal stretches, i.e. the magnitudes of the column vectors. To decouple strain from stretch we propose a modiﬁed shear constraint function ¯Si j = fi · f j |fi||f j| = 1 |fi||f j| Si j. (15) The modiﬁed constraint function and the corresponding PBD projections are shown in the last column of Fig. 2. Since the shear constraints are non-linear along the projec- tion direction, overshooting is possible. To be on the safe side, one can reduce the shear coefﬁcient as done in Fig. 2. We have not seen instabilities in our experiments due to the shear constraints though. 3.6. General Strain Orientation Eq. (9) and Eq. (10) constrain strain along the global coor- dinate axes. In certain cases, this is not desirable. Let us as- sume we have a tetrahedral layer on the surface of a character for simulating skin and we want the skin to slide easily tan- gential to the surface but not normal to it. There is a simple and elegant solution to this problem. We do not even have to modify our formulation. All we need to do is to modify the rest shape of the tetrahedra. As a pre-computation step, a lo- cal frame is computed for each tetrahedron. In the example above, this frame would be spawned by the tangent and nor- mal vector of the surface at the location of the tetrahedron. The constant rest positions q0, q1, q2 and q3 are then simply stored with respect to this local frame. 3.7. Volume and Area Conservation None of the constraints above controls the volume of tetra- hedra or area of triangles on its own. Only if all constraints are satisﬁed at the same time, we have G = I and, thus, det(F) = 1, i.e. conservation of volume. Often it is important to control volume conservation separately though. It allows the simulation of soft material with strong volume conser- vation for instance. Adding a separate volume/area conser- vation constraint is straight forward in the PBD framework. We simply deﬁne Cvolume(p0, p1, p2, p3) = det(F) − 1 and (16) Carea(p0, p1, p2) = det(F) − 1 (17) for 3D solids and 2D cloth respectively, where the ﬁrst con- straint corresponds to the volume conservation term pro- posed in [MHR06]. To be compatible with rest stretches c⃝ The Eurographics Association 2014. Matthias Müller Nuttapong Chentanez Tae-Yong Kim Miles MacklinNVIDIA / Strain Based Dynamics Figure 3: Varying the cloth stiffness parameters of dif- ferent strain components. From top to bottom the resis- tance to x-stretch, y-stretch and shear are: (high,high,high), (hight,high,low) and (low,high,high). Our method allows the control of these modes independently on triangle meshes with highly non-regular tessellations as the one used here. other than one these formulas need to be generalized to Cvolume(p0, p1, p2, p3) = det(F) − s1s2s3 (18) Carea(p0, p1, p2) = det(F) − s1s2. (19) Another important feature of this constraint is that it han- dles element inversion for tetrahedra since det(F) = 1 (20) det(P) det(Q −1) = 1 (21) det(P) = det(Q) (22) states that the signed volume of the tetrahedron must match its signed rest volume. In the Appendix we give the explicit formula for this constraint which shows that in case of vol- ume inversion, vertices are projected across the base face to the correct side. Element inversion is a general issue with FEM-based ap- Figure 5: Skin sliding on an alien bull. The top image shows the skin deformation created by linear blend skinning which stretches the surface unevenly. Our method allows the simu- lation of a tetrahedral layer on the surface with low tangen- tial shear resistance yielding correct skin sliding (bottom). proaches because forces are in general derived from the strain tensor only. Various papers such as [ITF04] have con- centrated on this problem alone. Our volume conservation term is a simple and effective solution as Fig. 4 shows. However, adding an additional constraint for volume con- servation can yield jittering due to the over-constrained sys- tem. This happens with extreme deformations when the stiff- nesses of the strain and volume constraints are close to 1. We found in our experiments that softening the volume con- straint by a small amount typically solves this problem. 3.8. Bending In the case of cloth simulation, since strain is an intrinsic measure, the strain based constraints do not inﬂuence bend- ing which is an extrinsic quantity. Therefore, bending needs to be handled separately as well. To simulate bending resistance we constrain the dihedral angle of pairs of adjacent triangles as proposed in [MHR06]. However, we use simpliﬁed formulas for the derivatives of c⃝ The Eurographics Association 2014. Matthias Müller Nuttapong Chentanez Tae-Yong Kim Miles MacklinNVIDIA / Strain Based Dynamics 0 0.5 1 1.5 2 2.5 3 3.5 4 CSL-GS tri SBD tri EBD tri SBD tri + bend SBD tet EBD tet SBD tet + vol Figure 6: Time in milliseconds for one iteration over 3600 elements, where CSL-GS stands for Continuum based Strain Limiting with Gauss-Seidel iterations, SBD for Strain Based Dynamics and EDB for Edge Based Dynamics. the dihedral angle w.r.t. the particle positions, namely the bending mode of a pair of triangles described by Bridson et al. [BMF03]. This mode corresponds one to one to the derivatives of the bending angle including scaling – a fact that is not mentioned in the paper. Only the sign has to be ﬂipped depending on the orientation of the triangle pair as we show in the Appendix. 3.9. Damping For damping, we use a general PBD formulation that specif- ically damps the relative velocities with respect to a con- straint with positional correction ∆p1, . . . , ∆pN as vi ← vi − k ( N ∑ j=1 v T j n j ) ni (23) where k ∈ [0, 1] is the corresponding stiffness and ni = ∆pi |∆pi| . Note that the term ∑ N j=1 vT j n j makes sure that damping is only applied to a given mode n j, without adding any arti- ﬁcial damping to rigid body motion as the sum cancels out when the mode itself does not change. 4. Results In the experiment shown in Fig. 3, we used a rectangular piece of cloth with irregular triangulation. We modiﬁed the stiffness parameters with respect to x-stretch, y-stretch and shear individually. Even with a highly irregular mesh, the cloth shows the expected behavior. Fig. 4 shows the tetrahedral case with a volumetric torus and locally aligned elements. To demonstrate the effective- ness of the volume term to correct inverted elements we started with the heavily entangled state in Fig. 4(a). As the ﬁrst four images show, the shape recovers with only a few iterations. Playing with the stiffness parameters of the dif- ferent modes lets us create interesting volumetric effects. In Fig. 4(c) we reduced all but the volume conservation stiff- ness. Reducing only the volume stiffness and the stiffness along the main axis creates the behavior shown in Fig. 4(f). With high shear and low stretch resistance in Fig. 4(g) the edge lengths are more deformed than the angles between edges. In the opposite conﬁguration in Fig. 4(h), the torus is free to bend signiﬁcantly while stretching is small. Timings using a single thread on a Core i7 CPU at 3 Ghz are given in Fig. 6. It was not possible to extract performance numbers on strain limiting alone from the paper of Wang et al. [WOR10] because the authors only measured the time spent on the combination of strain limiting and simulation. From the performance numbers given by Thomaszewski et al. [TPS09] we were able to extract a time of 5.3 millisec- onds for one iteration of strain limiting over 3600 trian- gles which we divided by a factor of 1.5 to compensate for the fact that they used a 2 Ghz CPU. Our method is more than three times faster than Continuum based Strain Lim- iting (CSL) and about 30 percent slower than Edge Based Dynamics (EBD). For tetrahedra, the slowdown of our ap- proach w.r.t. EBD is slightly higher. In both approaches, the number of constraints increases from 3 to 6 but the number of vertices per constraint increases from 3 to 4 in SBD while it stays at 2 in EBD. Even though not analyzed by Thomaszewski et al. we expect CSL to be signiﬁcantly slower for tetrahedra in which case the size of linear system per element increases to 12 × 12. A common problem in clothing simulations is that the cloth ﬁts well in the bind pose but causes problems in poses that differ signiﬁcantly from it. Lowering the stiffness in general creates stretchy cloth. As the results in Figure 1 show, being able to lowering the stiffness horizontally only solves the problem. We also used our approach for simulating a tissue layer on a character as shown in Figure 5. Making the shear con- straints very soft lets us simulate the skin sliding effect in a simple way. In the given example, skin sliding signiﬁcantly reduces the uneven stretching of linear blend skinning. 5. Conclusion We have presented a new way to simulate deformable ob- jects in the PBD framework. Instead of constraining the dis- tances on edges, we derive sets of positional projections for the deformation modes corresponding to the entries of the Green - St Venant strain tensor. We proposed modiﬁcations of the constraints to make the projections more robust and to decouple shear from stretch. We also discussed volume conservation, bending and damping. Our formulation is a step towards bridging the gap be- tween PBD popular in games and continuum based FEM which is often considered to be too expensive for real-time c⃝ The Eurographics Association 2014. Matthias Müller Nuttapong Chentanez Tae-Yong Kim Miles MacklinNVIDIA / Strain Based Dynamics applications. With the relatively simple formulation of our framework and the explicit formulas for the position correc- tions given in the Appendix we hope that this work is prac- tical enough to be widely adopted in the gaming and movie industry. References [BMF03] BRIDSON R., MARINO S., FEDKIW R.: Simulation of clothing with folds and wrinkles. In ACM SIGGRAPH Sympo- sium on Computer Animation (2003), pp. 28–36. 2, 7, 9 [BMOT13] BENDER J., MÜLLER M., OTADUY M. A., TESCHNER M.: Position-based methods for the simulation of solid objects in computer graphics. In EUROGRAPHICS 2013 State of the Art Reports (2013), Eurographics Association. 2 [BW98] BARAFF D., WITKIN A.: Large steps in cloth simula- tion. In Proceedings of the 25th annual conference on Computer graphics and interactive techniques (New York, NY, USA, 1998), SIGGRAPH ’98, ACM, pp. 43–54. 2 [DBB11] DIZIOL R., BENDER J., BAYER D.: Robust real-time deformation of incompressible surface meshes. In Proceedings of the 2011 ACM SIGGRAPH/Eurographics Symposium on Com- puter Animation (New York, NY, USA, 2011), SCA ’11, ACM, pp. 237–246. 2 [EB08] ENGLISH E., BRIDSON R.: Animating developable sur- faces using nonconforming elements. ACM Trans. Graph. 27, 3 (Aug. 2008), 66:1–66:5. 2 [GHF∗07] GOLDENTHAL R., HARMON D., FATTAL R., BERCOVIER M., GRINSPUN E.: Efﬁcient simulation of inex- tensible cloth. ACM Transactions on Graphics (Proceedings of SIGGRAPH 2007) 26, 3 (2007), to appear. 2 [HCJ∗05] HONG M., CHOI M.-H., JUNG S., WELCH S., TRAPP J.: Effective constrained dynamic simulation using implicit con- straint enforcement. In Robotics and Automation, 2005. ICRA 2005. Proceedings of the 2005 IEEE International Conference on (2005), pp. 4520–4525. 2 [HCPO13] HERNANDEZ F., CIRIO G., PEREZ A. G., OTADUY M. A.: Anisotropic strain limiting. In Proc. of Congreso Español de Informática Gráﬁca (2013). 2 [ITF04] IRVING G., TERAN J., FEDKIW R.: Invertible ﬁnite ele- ments for robust simulation of large deformation. In Proceedings of the 2004 ACM SIGGRAPH/Eurographics symposium on Com- puter animation (Aire-la-Ville, Switzerland, Switzerland, 2004), SCA 04, Eurographics Association, pp. 131–140. 6 [KCMF12] KIM T.-Y., CHENTANEZ N., MÜLLER-FISCHER M.: Long range attachments - a method to simulate inextensible clothing in computer games. In Proceedings of the ACM SIGGRAPH/Eurographics Symposium on Computer Animation (2012), Eurographics Association, pp. 305–310. 2 [KNE10] KELAGER M., NIEBE S., ERLEBEN K.: A triangle bending constraint model for position-based dynamics. In VRI- PHYS (2010), Erleben K., Bender J., Teschner M., (Eds.), Euro- graphics Association, pp. 31–37. 2 [KPGF07] KUBIAK B., PIETRONI N., GANOVELLI F., FRATAR- CANGELI M.: A robust method for real-time thread simulation. In Proceedings of the 2007 ACM Symposium on Virtual Reality Software and Technology (New York, NY, USA, 2007), VRST ’07, ACM, pp. 85–88. 2 [MHR06] MÜLLER M., HENNIX B. H. M., RATCLIFF J.: Posi- tion based dynamics. Proceedings of Virtual Reality Interactions and Physical Simulations (2006), 71–80. 1, 2, 5, 6, 9 [MKC12] MÜLLER M., KIM T.-Y., CHENTANEZ N.: Fast sim- ulation of inextensible hair and fur. In VRIPHYS (2012), Bender J., Kuijper A., Fellner D. W., Guérin E., (Eds.), Eurographics As- sociation, pp. 39–44. 2 [Mül08] MÜLLER M.: Hierarchical position based dynamics. Proceedings of Virtual Reality Interactions and Physical Simu- lations (2008). 2 [PCH∗13] PEREZ A. G., CIRIO G., HERNANDEZ F., GARRE C., OTADUY M. A.: Strain limiting for soft ﬁnger contact simula- tion. In Proc. of World Haptics Conference (April 2013), IEEE. 2 [PDA03] PICINBONO G., DELINGETTE H., AYACHE N.: Non- linear anisotropic elasticity for real-time surgery simulation. Graph. Models 65, 5 (Sept. 2003), 305–321. 2 [Pro95] PROVOT X.: Deformation constraints in a mass-spring model to describe rigid cloth behavior. Proceedings of Graphics Interface (1995), 147–154. 2 [TPS09] THOMASZEWSKI B., PABST S., STRASSER W.: Continuum-based strain limiting. Computer Graphics Forum 28, 2 (2009), 569–576. 2, 3, 7 [Tsi06] TSIKINIS K. D.: Better cloth through unbiased strain lim- iting and physics-aware subdivision. 2 [WOR10] WANG H., O’BRIEN J., RAMAMOORTHI R.: Multi- resolution isotropic strain limiting. ACM Trans. Graph. 29, 6 (Dec. 2010), 156:1–156:10. 2, 7 Appendix A: Explicit Formulas for Constraint Projection Here we give the explicit formulas for the constraints to ease the implementation of our method. Remember that we as- sume p0 = q0 = 0. Strain Based Constraints Let ci the columns of Q−1 and fi be the columns of F i.e. [c1, c2] = Q −1 (24) [f1, f2] = F (25) and [c1, c2, c3] = Q−1 (26) [f1, f2, f3] = F (27) for triangles and tetrahedra, respectively. Then the entries of S can be computed as Si j = fi · f j = (Pci) · (Pc j), (28) where i, j ∈ {1, 2} for triangles and i, j ∈ {1, 2, 3} for tetrahe- dra. The derivatives of the components of S w.r.t. the particle positions, needed in the PBD approach are ∇Si j = [ ∇p1 , ∇p2 ] Si j = f jc T i + fic T j (29) ∇Si j = [ ∇p1 , ∇p2 , ∇p3 ] Si j = f jc T i + fic T j (30) for triangles and tetrahedra respectively and ∇p0 Si j = − d ∑ k=1 ∇pk Si j, (31) c⃝ The Eurographics Association 2014. Matthias Müller Nuttapong Chentanez Tae-Yong Kim Miles MacklinNVIDIA / Strain Based Dynamics where d = 2 for triangles and d = 3 for tetrahedra. Following [MHR06] we get the particle projection vectors w.r.t. Si j as ∆pk = −λ wk∇pk Si j, (32) where wk is the inverse mass of particle k and λ = Sii − s2 i ∑k wk \f \f∇pk Sii\f \f2 , (33) λ = Si j ∑k wk \f \f∇pk Si j\f \f2 , (34) λ = 2 √ Sii − si ∑k wk \f \f∇pk Sii\f \f2 √ Sii (35) for Eqs. (9), (10) and (14), respectively. For the modiﬁed shear constraint function given in Eq. (15), the gradient is ∇ ¯Si j = 1 |fi||f j| ∇Si j − |f j|2 ficT i + |fi|2 f jcT j |fi|3|f j|3 Si j. (36) Material Coordinates for a Triangle The texture coordinates ui = (ui, vi) of the triangle vertices cannot be used directly as material coordinates for the rest state because they might contain stretching. To compute the material coordinates q0, q1, and q2 ∈ R2 we need an ortho- normal local frame. Let the rest positions of the vertices of the triangle in world space be x0, x1, x2 ∈ R3. We can com- pute two world space tangential vectors tu and tv ∈ R3 along the u and v axes as (tu, tv) = (x1 − x0, x2 − x0) (u1 − u0, u2 − u0) −1 (37) These tangents give us the local frame to transform the global positions into material coordinates as (c1, c2) = [n1, n2] T (x1 − x0, x2 − x0), (38) where n1 = tu |tu| and n2 = tv |tv| . To make sure tu and tv are normal to each other, the latter can alternatively be computed as the cross product of tu with the triangle normal. Bending Constraint Let p1, p2, p3 and p4 be the particles of a bending element consisting of the two triangles (p1, p3, p4) and (p2, p4, p3). The bending angle ϕ can be computed via the two triangle normals as ϕ = arccos ( (p3 − p1) × (p4 − p1) |(p3 − p1) × (p4 − p1)| · (p4 − p2) × (p3 − p2) |(p4 − p2) × (p3 − p2)| ) (39) The spatial derivatives correspond to the bending mode of [BMF03] and are ∇p1 ϕ = |e| n1 (40) ∇p2 ϕ = |e| n2 (41) ∇p3 ϕ = (p1 − p4) · e |e| n1 + (p2 − p4) · e |e| n2 (42) ∇p4 ϕ = (p3 − p1) · e |e| n1 + (p3 − p2) · e |e| n2, (43) where e = p4 − p3 (44) n1 = (p3 − p1) × (p4 − p1) |(p3 − p1) × (p4 − p1)|2 (45) n2 = (p4 − p2) × (p3 − p2) |(p4 − p2) × (p3 − p2)|2 . (46) The signs of all the derivatives have to be ﬂipped if (n1 × n2) · e > 0. Volume / Area Conservation Constraints From Eq. (22) we have Cvolume(p1, p2, p3) = det(P) − det(Q) (47) = p T 1 (p2 × p3) − q T 1 (q2 × q3) (48) and its derivatives ∇p1Cvolume = p2 × p3 (49) ∇p2Cvolume = p3 × p1 (50) ∇p3Cvolume = p1 × p2 (51) ∇p0Cvolume = −p2 × p3 − p3 × p1 − p1 × p2 (52) (53) Similarly we can derive a constraint for preservation of triangle area as Carea(p1, p2) = |p1 × p2| 2 − |q1 × q2| 2. (54) Its derivatives are ∇p1Carea = 2 p2 × (p1 × p2) (55) ∇p2Carea = 2 p1 × (p2 × p1) (56) ∇p0Carea = −2 p2 × (p1 × p2) − 2 p1 × (p2 × p1) (57) (58) with the corresponding particle projection vectors ∆pk = −λ wk∇pkCvolume(area), (59) where λ = Cvolume(area)/∑ k wk \f \f∇pkCvolume( area)\f \f2 . (60) c⃝ The Eurographics Association 2014.","libVersion":"0.2.2","langs":""}