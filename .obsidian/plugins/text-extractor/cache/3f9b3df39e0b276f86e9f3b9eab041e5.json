{"path":".obsidian/plugins/text-extractor/cache/3f9b3df39e0b276f86e9f3b9eab041e5.json","text":"Eurographics/ ACM SIGGRAPH Symposium on Computer Animation (2012) P. Kry and J. Lee (Editors) Mass-Conserving Eulerian Liquid Simulation Nuttapong Chentanez 1,2 and Matthias Müller 1 1NVIDIA Research 2Chulalongkorn University Abstract We present a GPU friendly, Eulerian, free surface ﬂuid simulation method that conserves mass locally and globally without the use of Lagrangian components. Local mass conservation prevents small scale details of the free surface from disappearing, a problem that plagues many previous approaches, while global mass conservation ensures that the total volume of the liquid does not decrease over time. Our method handles moving solid boundaries as well as cells that are partially ﬁlled with solids. Due to its stability, it allows the use of large time steps which makes it suitable for both off-line and real-time applications. We achieve this by using density based surface tracking with a novel, unconditionally stable, conservative advection scheme and a novel interface sharpening method. While our approach conserves mass, volume loss is still possible but only temporarily. With constant mass, local volume loss causes a local increase of the density used for surface tracking which we detect and correct over time. We also propose a density post-processing method to reveal sub-grid details of the liquid surface. We show the effectiveness of the proposed method in several practical examples all running either at interactive rates or in real-time. 1. Introduction Tracking the free surface of a liquid is an important and challenging problem. For an overview of existing methods we recommend the class notes of Wojtan et al. [WMFB11]. The most popular approach is to advect a scalar ﬁeld with the ﬂuid and deﬁne the liquid surface to be one of the iso- surfaces. The main advantage of this class of methods is that they handle topological changes implicitly in contrast to mesh-based tracking methods. Until recently, the level set method was the method of choice in graphics. Here, the signed distance ﬁeld is used as the scalar ﬁeld with the zero- iso-surface as the liquid surface. A well known drawback of the level set method is that vol- ume is lost both globally and locally. With global volume loss the water level decreases over time while local volume loss causes small detail such as thin sheets and droplets to disappear. A way to alleviate this problem is to introduce Lagrangian components such as particles [FF01], [EMF02] or triangle meshes [BGOS05]. Even though these methods reduce volume loss, they cannot guarantee complete volume conservation. Moreover, Lagrangian components add signif- icant run-time cost and complicate the implementation sig- niﬁcantly, especially for GPUs. As an alternative to the signed distance ﬁeld, [MMTD07] in- troduced the idea of using a density ﬁeld as the scalar ﬁeld for surface tracking with the liquid surface being the 0.5 iso- surface. This density ﬁeld is not to be mistaken for the den- sity ﬁeld of the liquid. In incompressible ﬂuid simulations, the ﬂuid-density is 1 everywhere and therefore not stored. So in what follows, we use the symbol ρ for the surface density. We chose to use surface density instead of the signed dis- tance ﬁeld because there are advection methods that strictly conserve quantities like density such as the one proposed by [LAF11]. Their advection method is unconditionally sta- ble and fully conservative. With this approach, the overall mass deﬁned by the surface density is conserved. Since the surface density can devi- ate from 1 temporarily, the overall volume may vary over time though. However, in contrast to the level set method where such variations go unnoticed, volume deviations are reﬂected in the density ﬁeld. In this paper we propose sev- eral methods to preserve volume both globally and locally using the information stored in the density ﬁeld. Ideally, the surface density has the form of a step function at the liquid-air interface. Over time, however, the initially sharp boundary blurs out due to numerical diffusion. There- fore, [MMTD07] apply a sharpening ﬁlter at each time step which conserves mass globally but not locally. We propose a c⃝ The Eurographics Association 2012. Nuttapong Chentanez & Matthias Müller / Mass-Conserving Eulerian Liquid Simulation Figure 1: A liquid jet with large ﬂow rate inside a rectangular tank simulated at a resolution of 256x128x128 cells. The simula- tion time step is 1/30 seconds (CFL 25) which is much larger than what is typically used in other grid based liquid simulation approach. The liquid moves across many grid cells in a single time step, a situation our method handles without difﬁculty. Left) Surface rendering. Right) Volumetric rendering showing intricate detail of the density ﬁeld. new sharpening method which conserves mass both locally and globally. Our main contributions are: • A GPU friendly, purely Eulerian liquid simulator that con- serves mass locally and globally without any need for La- grangian components. • A new GPU friendly sharpening method which conserves mass locally and globally. • Modiﬁcations to reduce the computational cost of the con- servative advection method of [LAF11] and to make it more GPU friendly. • Additional novel steps to handle non-axis aligned and moving solid boundaries. • A density post processing technique to bring out sub-grid detail. 2. Related Work 3D Eulerian liquid simulation was introduced to computer graphics by Foster and Metaxas [FM96] who used a ﬁnite difference approach to solve the governing equations. Later Foster and Fedkiw [FF01] employed the semi-Lagrangian method introduced by Stam [Sta99] to solve the advection term and the level set method and particles to track liquid surface. Enright et al. [EMF02] devised the Particle Level Set (PLS) method which uses particles on both sides of liquid-air interface to reduce volume loss. Since then, many methods have been proposed to further improve the accuracy of Eulerian surface tracking. Various approaches have been proposed to track the liquid domain more faithfully. [BGOS05] used a triangle mesh rep- resentation in connection with a level set grid, [HK10] aug- mented the level set grid with quadrature points. Grid-less methods work with Lagrangian elements only such as parti- cles [ZB05], [APKG07] or [YT10], triangles meshes [M¨09], [BB09] and [WTGT10]. In this paper we focus on ﬂuid mass and volume conserva- tion. A popular way to compensate volume gain or loss is to modify the divergence of the velocity ﬁeld as proposed in [FOA03]. This technique was extended and used for con- serving volume of bubbles [KLL ∗07], highly deformable ob- jects [ISF07] and liquids [MMTD07]. The problem of loss of liquid mass and momentum has also been addressed by proposing elaborate advection meth- ods such as BFECC [KLLR05], modiﬁed MacCormack [SFK ∗08], derivatives advection [KSK08] and conservative semi-Lagrangian advection [LGF11], [LAF11]. As an alternative to level-set, the ﬂuid domain can be tracked with a Volume-of-Fluid (VOF) approach [HN81] where the volume fraction of ﬂuid in each cell is evolved over time. With proper care, VOF can be made mass conserv- ing. However, despite several improvements in subsequent works such [PP04], [AGDJ08], reconstructing surface nor- mal and curvature from VOF is still difﬁcult. Sussman and Puckett [SP00] proposes coupled Level Set and Volume-of- Fluid (CLVOF) which track the ﬂuid interface with both representations, where VOF is used for re-initializing the Level Set. The surface can then be extracted from the Level Set. CLVOF is extended to handle multiple interfaces in [KPyNS10]. The downside of CLVOF is the need to use two representations which can be quite computationally inten- sive. An alternative to VOF is to track a smeared-out sur- face density and keep it relatively sharp with a sharpening operation. This method was introduced to computer graph- ics by Mullen et al. [MMTD07]. Our ﬂuid domain tracking approach builds upon this work and make it conserve mass both locally and globally. Apart from the Eulerian formulation we use, there are many alternative models to simulate 3D liquids such as the Lattice- Boltzmann method [TR04] and [TR09], approaches based on the discrete sin-cosine transform [LR09] or particle based methods such as [MCG03], [PTB∗03], [APKG07], [SP09], and [SG11]. c⃝ The Eurographics Association 2012. Nuttapong Chentanez & Matthias Müller / Mass-Conserving Eulerian Liquid Simulation 3. Methods We simulate the liquid by solving the inviscid Euler Equa- tions, ∂u ∂t = −(u · ∇)u + f d − ∇p d , (1) subject to the incompressibility constraint ∇ · u = 0, (2) where u = [u, v, w]T is the ﬂuid velocity ﬁeld, p is the pres- sure, t is time, d the ﬂuid density and f is a ﬁeld of external forces. The equations are solved in the domain speciﬁed by a sur- face density ﬁeld ρ [MMTD07], in the region where ρ > 0.5. The surface density itself is advected with the ﬂuid via ∂ρ ∂t = −u · ∇ρ (3) and periodically sharpened to prevent the 0.5 iso-contour from being blurred by numerical damping. The interaction of the liquid with the environment is handled by considering the appropriate Dirichlet and Neumann boundary conditions. 3.1. Discretization We discretize the simulation domain using a regular stag- gered grid [HW65]. The x, y and z components of ﬂuid ve- locity u = (u, v, w) are stored at the center of the faces per- pendicular to the x, y and z axis, respectively. The scalar pressure p and the density ρ are stored at cell centers fol- lowing [MMTD07]. 3.2. Time integration Our time integration scheme is summarized in Algorithm 1. The overall structure is the same as the one proposed in [MMTD07] with our novel modiﬁcations to the advec- tion, sharpening and pressure incompressibility enforcement steps. Algorithm 1 Time step 1: Velocity extrapolation 2: Density advection and density sharpening 3: Velocity advection and external force addition 4: Incompressibility enforcement First, we extrapolate the velocity ﬁeld into the air region. Then, we advect the surface density ﬁeld and sharpen it. Af- ter this we advect the velocity ﬁeld and take external forces into account. Finally, we enforce incompressibility by mak- ing the velocity ﬁeld divergence free. 3.3. Velocity Extrapolation To extrapolate the velocities from inside the liquid into the surrounding air we use the scheme described in [CM11b], i.e. we apply the method of [JRW07] to derive the velocities a few grid cells away from the interface and then extrapolate based on a hierarchy of grids to obtain velocities far away from the surface. 3.4. Density Advection We advect ρ using our unconditionally stable conservative advection method which we derived from the method pro- posed by Lentine et al. in [LGF11] and [LAF11] and im- proved in terms of computational cost. Lentine et al. [LGF11] modiﬁed the semi-Lagrangian advec- tion scheme to conserve mass by ensuring that each cell dis- tributes all its mass of the current time step among some cells at the next time step. Let A be the matrix of the dis- cretized advection operator such that ρ n+1 = Aρ n, where ρ n and ρn+1 are the density in the current and the next time step respectively. Let w − i j (and w + i j ) represent the fraction of value that cell i gives to cell j which is found by backward (and forward) tracing and computing the tri-linear interpolation weights. The entries of A in the standard semi-Lagrangian advection is hence Ai j = w − ji . Then, β j = ∑i Ai j is the frac- tion of mass from cell j that gets advected. To ensure that mass is conserved, A needs to be modiﬁed such that all the β j are 1. Lentine et al. [LGF11] achieve this by ﬁrst iterating through all cells j with β j > 1 and re-scaling all Ai j to Ai j/β j. In a second step they iterate through all cells j with β j < 1 and forward trace the velocity ﬁeld to adding the weights (1 − β j) by distributing them among the Ak j, where k are the cells reached by forward tracing and tri-linear interpola- tion. At this point, all the β j are 1, i.e. A is mass conserving. This method works well for compressible ﬂow on ﬁne grids. However, as discussed in [LAF11], the scheme produces ar- tifacts when used for incompressible ﬂow on coarser grids. The problem is due to the clamping of the β j by re-scaling which limits the amount of density that reaches certain cells. An indicator of this amount are the γi = ∑ j Ai j. The tradi- tional semi-Lagrangian method ensures that all the γi are 1 while the β j are arbitrary. In contrast, the scheme described above ensures that all the β j are 1, while the γi are arbitrary. Lentine et al. [LAF11] propose a method to ensure the β j are all 1 while the γi stay close to 1. To this end they keep track of the cumulative γi over time as separate variables. The matrix A is computed by performing multiple forward and backward traces as follows: 1. Advect γi using the backward semi-Lagrangian method (set to 1 in the ﬁrst time step). 2. Compute A by performing a backward tracing step as be- fore, i.e. Ai j = w − ji . c⃝ The Eurographics Association 2012. Nuttapong Chentanez & Matthias Müller / Mass-Conserving Eulerian Liquid Simulation 3. Scale A by the γi, i.e. Ai j ← Ai j/γi. 4. Compute the β j from A. 5. Forward trace the velocity ﬁeld to add the weights (1 − β j) to A for all cells j where β j < 1 by distributing them among the Ak j, where k are the cells reached by forward tracing and tri-linear interpolation as before, i.e. Ak j+= (1 − β j)w+ jk. 6. Compute the new γi from the updated matrix A. 7. Scale A by the γi, i.e. Ai j ← Ai j/γi. 8. Re-compute the β j from the updated matrix A. 9. Clamp the β j to 1 by re-scaling Ai j ← Ai j/β j. 10. Re-compute the γi from the updated A. 11. Evaluate ρ n+1 = Aρ n. At this point, all the β j are 1 but the γi might still deviate from 1. To bring them even closer to 1 Lentine et al. apply a diffusion step on ρn+1 and the γi. They iterate through all the cells dimension-by-dimension. If, for two neighboring cells i and j, γ j > γi, they move ρ j(γ j − γi)/2γ j from cell j to cell i and set both γ j and γi to γ j+γi 2 . If γ j < γi, the ﬂow happens in the opposite direction. This process is repeated 1 to 7 times per time step. Note that these diffusion iterations do not affect the β j, so they remain 1. Implementing the method described above on a GPU would require 5 scatter passes per iteration in steps 4, 6, 8, 10, and 11. Scattering is expensive on GPU’s because it either re- quires atomic operations or a preﬁx-scan. We propose a modiﬁcation of this method. The basic idea is to reorder the forward tracing and the re-scaling steps to simplify the calculations. The resulting discrete conservative advection operator is not the same as the one computed with the original scheme. However, both are just approximations to the doubly-stochastic matrix (all row- and column sums are one) closest to the original discrete advection operator. While the visual results are of similar quality as shown in Figure 2 and the accompanying video, our simpliﬁcation re- duces the number of scatter passes from 5 to 3. Another ad- vantage of our new scheme is that A does not need to be stored explicitly because the order of the operations allow for updating ρn+1, β and γ directly. Not storing A explic- itly is possible in the original scheme as well but it would complicate the process considerably and would require even more scatter operations. Here is our modiﬁed scheme: 1. Advect γi using the semi-Lagrangian method (set to 1 in the ﬁrst time step). 2. Initialize β ← 0. 3. Add the weights γi to β by distributing them among the βl, where l are the cells reached by backward tracing and tri-linear interpolation, i.e. βl+= w − li γi. Figure 2: Snapshots from a simulation of a 2D ball of liq- uid dropping into an empty box at a resolution of 128 2 cells. Top) Using conservative advection method of Lentine et al. 2011. Bottom) Using our conservative advection method. The result are of similar visual quality. 4. Evaluate ρ n+1 from ρn and γ ′ from γ by backward tracing and tri-linear interpolation from cells l but this time scale the weights by γi max(1,βl ) , i.e. ρ n+1 i += ∑l γi max(1,βl ) w − li ρn l ) 5. γ ← γ ′. (This can be done in-place during the previous step). 6. For each cell j whose β j < 1, add ρn j (1 − β j) to ρ n+1 by distributing the value among the ρ n+1 k , where k are the cells reached by the forward tracing and tri-linear inter- polation, i.e. ρ n+1 k += ρn j (1 − β j)w + jk. 7. Similarly, for each cell j whose β j < 1, add (1 − β j) to γ by distributing the value among the γk, where k are the cells reached by the forward tracing and tri-linear inter- polation, i.e. γ n+1 k += γ n j (1 − β j)w + jk. These two steps can be done concurrently. 8. Apply diffusion as in the original approach. This modiﬁed method only requires 3 scatter passes in the steps 3, 6, and 7. As demonstrated in Table 1, our method keeps γ in a similar range to that of [LAF11], while [LGF11] has a much larger range, resulting in visible compressibility artifacts. Method Minimum γ Maximum γ Our Method 0.627 2.403 [LAF11] 0.627 2.502 [LGF11] 0.271 9.793 Table 1: Minimum and maximum γ of our method, LAF11 and LGF11 for the situation of Figure 2. Our method and LAF11 have similar range, while LGF11 has a much larger range which explains the incompressibility artifacts. 3.5. Density sharpening The technique above guarantees that mass is conserved. However, the density ﬁeld smooths out over time blurring the 0.5 iso-contour with the effect that we can no longer track the movement of the liquid surface accurately. We solve this c⃝ The Eurographics Association 2012. Nuttapong Chentanez & Matthias Müller / Mass-Conserving Eulerian Liquid Simulation problem by manipulating ρ to sharpen the interface. Follow- ing [MMTD07], we ﬁrst compute the mass change of each cell due to unit velocity along the x axis as δx+ i = ∫ Ci (∇ · (ρ[1, 0, 0] T )∆T )dV, (4) δ x− i = ∫ Ci (∇ · (ρ[−1, 0, 0] T )∆T )dV, (5) where ∆T is the ﬁctitious time step, which we set to 3 times that of the simulation time step in all of our examples. We discretize δ x+ i and δ x− i using an upwind scheme to get δ x+ i ≈ −(ρi − ρi−(1,0,0))∆x∆T, (6) δ x− i ≈ −(ρi+(1,0,0) − ρi)∆x∆T. (7) The mass change due to unit velocity along y and z axes, δ y+ i , δ y− i , δ z+ i , and δ z− i are computed similarly. The maximum mass increase and mass decrease due to any unit velocity in each cell is: ∆T |∇ρ|+ i= 1 ∆x2(max(max(δ x+ i , 0) 2, min(δ x− i , 0) 2) + (8) max(max(δ y+ i , 0) 2, min(δ y− i , 0) 2) + (9) max(max(δ z+ i , 0) 2, min(δz − i , 0) 2)) 1 2 (10) and ∆T |∇ρ|− i = 1 ∆x2(max(min(δ x+ i , 0) 2, max(δ x− i , 0) 2) + (11) max(min(δ y + i , 0) 2, max(δ y− i , 0) 2) + (12) max(min(δ z+ i , 0) 2, max(δz − i , 0) 2)) 1 2 . (13) We then compute wi(ρ) = (ρi − 0.5) 3(1 − min(1, max j∈ℵ(Ci)(|ρi − ρ j|) τ )),(14) where ℵ(Ci) is the set of cells adjacent to Ci. The parameter τ controls the maximum difference in density between two adjacent cells, which we set to 0.4 as in [MMTD07]. This yields the following density correction: ∆ρi = wi(ρ) { ∆T |∇ρ|+ i if wi(ρ) ≥ 0 ∆T |∇ρ|− i if wi(ρ) < 0 . (15) ρ can then be sharpened by updating the density of each cell using ρi ← ρi + ∆ρi. (16) This update sharpens the interface. However, it does not con- serve mass. Mullen et al. [MMTD07] modify it to conserve mass by summing up the mass change due to this update across all cells. Then they distribute a fraction of the total mass change back to each cell based on a local area measure. This successfully conserves mass globally. One artifact of this approach is that mass moves far, potentially across the entire simulation domain. This problem can be reduced by Figure 3: Top) The density sharpening method used by Mullen et al. [2007] conserves mass globally but not locally, causing the mass from a liquid ball (marked with the ar- row) to disappear in mid air. Bottom) Our density sharpening method conserves mass both globally and locally preserving the mass of the liquid ball. re-distributing mass only within connected regions as pro- posed by [KLL ∗07]. However, even with this technique, lo- cal mass loss can still occur due to moving mass away from small features resulting in the disappearance of small surface details. Figure 3 top shows a scene where liquid balls are thrown into a pool of water. The mass conserving sharpen- ing method of [MMTD07] transfers the mass from the liquid balls to the pool causing them to disappear mid-air. The left side of Figure 4 illustrates the situation in greater detail. We propose a novel method to conserve mass during the sharpening phase that conserves mass both locally and glob- ally. After evaluating ∆ρi using Equation 15, we modify it as follows: ∆ρi ←  | | −ρi if ρi + ∆ρi < 0 or ρi < ε 0 if ρi > 0.5 ∆ρi otherwise, (17) where we use ε = 10 −5 in all examples. In the ﬁrst line we make sure that ρ ≥ 0 at the next time step. We also clamp small positive densities to zero so that we do not have to apply the sharpening operator to this cell at the next time step, thus reducing computation cost. In the second line we make sure that cells with ρ > 0.5 are not modiﬁed. This way mass only moves from the air side to the liquid side. Then we update ρi using this modiﬁed ∆ρi in Equation 16. We then add back −∆ρi by using Algorithm 2. TraceAlongField determines where to put the lost mass. It starts from the cell center and follows the gradient ﬁeld of the density ∇ρ until it reaches the 0.5 iso-contour. The tracing stops if a predeﬁned distance D∆x is reached or if it crosses a solid boundary. This is done using multiple forward Euler sub-steps. ScatterValue deposits −∆ρi to nearby grid points using tri-linear weights. If a grid point is in a solid we set the corresponding weight to zero and re-normalize the weights. We use values of D between 1.1 to 3.1 in all of our examples. c⃝ The Eurographics Association 2012. Nuttapong Chentanez & Matthias Müller / Mass-Conserving Eulerian Liquid Simulation 0.0 0.5 1.0 0.0 0.5 1.0 0.0 0.5 1.0 0.0 0.5 1.0 0.0 0.5 1.0 0.0 0.5 1.0 Figure 4: Comparison between the sharpening scheme of Mullen et al. 07 (Left) and ours (Right). The bigger hump has a large area with 0.5 < ρ < 1.0. In this particular case, − ∑i ∆ρi is negative in the scheme of Mullen et al. 2007. This negative mass is distributed to all the cells near interface, causing the smaller hump to become even smaller. Our method does not have this problem because −∆ρ > 0 is only added to the nearby cells around the 0.5 iso-contour. This prevents mass from being transported from one hump to another. Figure 5: Left most) Initial condition of a ball dropping into a liquid pool. Others) Liquid surface at frame 40 of simula- tions with various values of parameter D. Figure 5 shows the result of ball dropping into a pool us- ing various values of D. Increasing D visually resembles the effect of surface tension. Algorithm 2 Local mass conservation for sharpening 1: for each cell i do 2: p = TraceAlongField(Position(i), ρ, ∇ρ, D∆x) 3: ScatterValue(p, −∆ρi). 4: end for 3.6. Handling Solid Boundaries So far, the method does not take solid fraction and solid ve- locity into account. We use u s = (u s, v s, w s) for the solid ve- locity and Vi for the fraction of non-solid matter, i.e. ﬂuid and air in cell i. The scalars V f i+( 1 2 ,0,0), V f i+(0, 1 2 ,0), and V f i+(0,0, 1 2 ) represent the fraction of non-solid area of the positive x, y, and z faces respectively. δ x+ i ≈−(ρiV f i+( 1 2 ,0,0) − ρi−(1,0,0)V f i−( 1 2 ,0,0))∆x∆T, (18) δx− i ≈−(ρi+(1,0,0)V f i+( 1 2 ,0,0) − ρiV f i−( 1 2 ,0,0))∆x∆T. (19) During the simulation, the value of ρi can become larger than Vi in some cells which is a non-valid state. We han- dle the situation differently depending on whether the cell is partially solid (Vi < 1) or completely non-solid (Vi = 1). If the cell is partially solid, we ﬁrst compute the excess den- sity d = ρi − Vi. When then follow the gradient of the solid signed distance function away from the solid for a distance of S∆x and scatter d to nearby grid points. After this we sub- tract d from ρi. This method keeps ρi ≤ Vi in most cells near solid boundary and guarantees ρi = 0 inside the solid. We use S = 1 in all of our examples. With this choice excess density gets removed from solid quickly enough to not cause visual artifacts. The case where Vi = 1 is handled in the in- compressibility enforcement step described in the next sec- tion. 3.7. Enforcing Incompressibility To enforce incompressibility, we ﬁrst compute the pressure using a variational framework [BBB07] and then use the pressure gradient to make velocity ﬁeld divergence free. The tricky part in our case is to determine the fraction of liquid in each cell. This fraction is used to decide whether a cell is included in the linear pressure solve. It is also needed in the ghost ﬂuid method [ENGF03] to accurately handle the liquid-air boundary. However, we cannot directly use ρ be- cause a cell with V < 0.5 will likely have ρ < 0.5 causing the solver to treat it erroneously as air. To ﬁx this, we deﬁne ρ′ as follows: ρ′ i = { 0 if Vi = 0 ρi Vi otherwise . (20) Notice that cells that are completely solid (V = 0) have ρ′ = 0. We then extrapolate ρ′ from cells that have V > 0 to adjacent cells with V = 0 so they are included in the lin- ear system. For the ghost ﬂuid method, we also need a signed distance function near the free surface. We approximate this ﬁeld by deﬁning ϕi = −(ρ′ i − 0.5)∆x and use the method of [CM11a] to compute the coefﬁcients of linear system for pressure projection. To handle the cells with ρ′ i > 1 (whether or not V = 1 or V < 1), we add min(λ(ρ′ i −1),η) ∆x to the divergence, where we use λ = 0.5 and η = 1 in all our examples. This artiﬁcial divergence pushes the excess density away from the cells whose ρ′ > 1. Mullen et al. [MMTD07] also added this term to the divergence but with λ = 1 and η = ∞ which can cause stability problems when ρ′ is much larger than 1. A scenario in which this happens is when liquid ﬂows very fast towards a solid boundary and gets reﬂected due to our method for removing excess density from the solid. c⃝ The Eurographics Association 2012. Nuttapong Chentanez & Matthias Müller / Mass-Conserving Eulerian Liquid Simulation Figure 6: A crown splash simulated with our method at reso- lution of 128 3 cells. The density ﬁeld is post-processed with the method proposed in this paper to enhance sub-grid de- tails. Adding additional divergence is important because in our case, ρ′ > 1 results in visual volume loss. With the method described above, this problem gets gradually corrected over time. We solve for the pressure p with the multigrid method of [CM11a] which enforces separating solid boundary con- ditions. Finally, we use the pressure ﬁeld to make the veloc- ity ﬁeld divergence free. 3.8. Density Post Processing For rendering, we extract the triangle mesh of the 0.5 iso- contour of ρ using the marching cubes method [LC87]. This approach is typically used in level-set based liquid simula- tions as well to extract the zero contour of the signed dis- tance ﬁeld [EMF02]. The surface density ρ contains small scale details that are not captured by the 0.5 iso-contour. This problem is clearly visible on the right side of Figure 1 and in the bottom row of Figure 12. Here, the regions where 0 < ρ < 0.5 represent features such as small splashes and thin sheets that are too small to be captured with the grid resolution used. In the level-set approach, these features are destroyed by the re- distancing step. To bring out these small scale details in surface rendering, we propose a post processing method. An important obser- vation is that regions in which 0 < ρ < 0.5 do not necessarily represent small scale features. They also exist on the air side of the surface of large liquid regions. In the latter case, we want to leave ρ unchanged but in the former we want to scale up ρ so that the features appear in the 0.5 iso-surface. To this end, we deﬁne an additional function γi = 2 min(ρi, 0.5) and deﬁne the regions in which ρ needs to be scaled up as the regions where γ ≤ 0.5. So far, the two cases above are not distinguished. However, this can be achieved by applying a Gaussian blur ﬁlter to γ. Now, since γ > 0.5 inside liquid, those values spread across the interface and cause γ to raise toward 1. In contrast, since γ < 0.5 every- where inside small scale features, blurring will still result in γ being small. We then deﬁne ρ′′ i = ρi min(max(γi,θ),1) and ex- tract the liquid surface as the 0.5 iso-surface of this modiﬁed density ﬁeld. The effect of this post processing method is shown in Figure 6 and in the accompanying video. We used σ = 2∆x for the Gaussian blur ﬁlter and θ = 0.01 in this example. A way to improve the results further would be to apply thinning to the parts of the surface that come from region with ρ < 0.5 in order to compensate for the density up-scaling. This is part of our future work. 4. Results We implemented our method using CUDA and ran the sim- ulations on an NVIDIA GTX 680. For all the examples we used a time step size of 1/30s, ∆x = 0.05m, gravity 10m/s2 and D = 2.1. Density post-processing was turned off unless otherwise stated. Our code run at interactive rates in all ex- amples. The simulation times and CFL numbers are listed in Table 2. Parameter tuning to get visually appealing results did not take much time. We compared our method with the particle level set (PLS) approach [EMF02]. The results of this comparison are shown in Figure 7 and in the accompanying video. Our method conserves the liquid’s mass as expected and prevents the water level from decreasing. In contrast, with PLS, most of the liquid disappears in the course of the simulation due to the large time step size used. We used the PLS implemen- tation of [MF] and set the number of particles per cell to 64. Figure 1 shows a simulation of a liquid jet in a rectangu- lar tank. The jet has a very fast ﬂow rate and generates fast moving liquid splashes and sheets. The accompanying video of this example also shows how we ﬁll the tank from a completely dry state by adding liquid balls. These are difﬁ- cult cases for level set approaches while our method handles them without any problem. With our approach we were able to create, for the ﬁrst time, a 3d water demo that is both simulated and ray-traced in real time. The scene starting with a dam break initial setup and subsequent additions of water balls is shown in Figure 9. We achieved a frame rate of over 30fps with two GPUs, one for simulation and one for ray-tracing. Figures 8 and 12 show a dam break and dropping balls in a spherical container. In the accompanying video we shake the container. These examples demonstrate the ability of our method to simulate liquid in a non-axis aligned moving con- tainer. One way coupling with fast moving solids is shown in Figure 11 and the accompanying video. Several solid objects move at high speed across the tank sloshing the liquid up to the air. Our method conserves mass and prevents volume loss in this difﬁcult case as well. We computed the mass and the volume enclosed by the 0.5 iso-contour of the liquid over time in various examples. The corresponding plots are shown in Figure 10. The total mass is computed by integrating ρ over the whole simulation grid. To measure the volume we used marching cubes to extract the 0.5 contour triangle mesh of ρ and determined the en- closed volume. Our method conserves mass in all examples c⃝ The Eurographics Association 2012. Nuttapong Chentanez & Matthias Müller / Mass-Conserving Eulerian Liquid Simulation Figure 7: Liquid ball dropped inside a box simulated on a 1283 resolution grid. Left) Initial condition. Shape of the surface at frame 40 computed with our method (middle) and with PLS (right). PLS loses most of the mass due to the large time step used. Figure 8: Snapshots of a dam breaking scene in a spherical container simulated at a resolution of 128 3 cells. and generally keeps the volume close to the true liquid vol- ume. However, there are several situations where our method loses volume visually. One such case is when a liquid ball hits the ground and spreads out until it becomes thinner than the grid spacing. Even though the density values are non- zero, marching cubes does not generate surface meshes in those regions. Another case is when the ratio of surface area to volume is large. In this case, there are large regions with ρ < 0.5 that do not contribute to the volume because the 0.5 iso-contour is empty. However, in contrast to PLS, when such features join the main body of water again, they cor- rectly contribute to its volume so that the global level re- mains constant. Name Grid CFL Time (ms) Figure 1 256x128x128 25 113.2 Figure 5 128x128x128 8 54.2 Figure 9 128x128x64 24 26.7 Figure 8 128x128x128 14 53.4 Figure 11 256x128x128 32 118.6 Figure 12 128x128x128 20 53.8 Table 2: CFL Number and simulation time per frame for var- ious examples. We use the time step of 1/30s in all examples. All timing are done on GTX680. 5. Conclusion and Discussion We proposed a method for simulating liquids that conserves mass and is effective in keeping the volume deﬁned by the 0.5 iso-contour close to constant. We have demonstrated the strength of our technique in various scenarios. The method has its limitations as well. First, although our sharpening scheme ensures that the ρ = 0.5 interface is sharp, it does not modify regions where ρ > 0.5. It could theoretically be possible that the region with ρ slightly above 0.5 expands so that the volume deﬁned by the 0.5 iso-contour grows by a factor of two while keeping its original mass. This, however, Figure 12: Simulation of a liquid ball dropping inside a spherical container at a resolution of 128 3 cells. Top) Sur- face rendering. Bottom) Volume rendering, showing many sub-grid details not visible in the surface rendering. does not happen in practice because the divergence free ve- locity ﬁeld prevents the liquid from expanding signiﬁcantly. An alternative to our sharpening method is to perform anti- diffusion step [SHA11], which is an interesting avenue for future work. Another limitation is the possibility of losing local volume temporarily as discussed in the previous sec- tion. The density post processing method we proposed is an effective way to alleviate this effect. Even though our method cannot guarantee complete volume conservation at all times, it reduces this problem signiﬁcantly in comparison to all the previous methods we have investigated. References [AGDJ08] ANDERSON J. C., GARTH C., DUCHAINEAU M. A., JOY K.: Discrete multi-material interface reconstruction for volume fraction data. Computer Graphics Forum (Proc. of Eurographics/IEEE-VGTC Symposium on Visualization 2008) 27, 3 (2008). 2 [APKG07] ADAMS B., PAULY M., KEISER R., GUIBAS L. J.: Adaptively sampled particle ﬂuids. ACM Trans. Graph. 26 (July 2007). 2 [BB09] BROCHU T., BRIDSON R.: Robust topological operations for dynamic explicit surfaces. SIAM Journal on Scientiﬁc Com- puting 31, 4 (2009), 2472–2493. 2 [BBB07] BATTY C., BERTAILS F., BRIDSON R.: A fast varia- tional framework for accurate solid-ﬂuid coupling. In Proc. SIG- GRAPH (2007), p. 100. 6 [BGOS05] BARGTEIL A. W., GOKTEKIN T. G., O’BRIEN J. F., STRAIN J. A.: A semi-lagrangian contouring method for ﬂuid simulation. ACM Transactions on Graphics (2005). 1, 2 [CM11a] CHENTANEZ N., MÜLLER M.: A multigrid ﬂuid pres- sure solver handling separating solid boundary conditions. In Proceedings of the 2011 ACM SIGGRAPH/Eurographics Sym- posium on Computer Animation (New York, NY, USA, 2011), SCA ’11, ACM, pp. 83–90. 6, 7 [CM11b] CHENTANEZ N., MÜLLER M.: Real-time eulerian wa- ter simulation using a restricted tall cell grid. In Proc. SIG- GRAPH (2011), p. 82. 3 [EMF02] ENRIGHT D., MARSCHNER S., FEDKIW R.: Anima- tion and rendering of complex water surfaces. In Proc. SIG- GRAPH (2002), pp. 736–744. 1, 2, 7 [ENGF03] ENRIGHT D., NGUYEN D., GIBOU F., FEDKIW R.: Using the particle level set method and a second order accu- rate pressure boundary condition for free surface ﬂows. In c⃝ The Eurographics Association 2012. Nuttapong Chentanez & Matthias Müller / Mass-Conserving Eulerian Liquid Simulation Figure 9: Snapshots of a dam break and ball drop scene in a glass box at a resolution of 128x128x64 cells. The simulation and raytracing run in parallel on dual NVIDIA GTX680 GPUs in real-time at 30fps. Figure 10: Time evolution of mass and volume relative to the ground truth in various examples. In all examples, the time axis is re-scaled to start at 0 and end at 1. The volume of the liquid was measured by evaluating the volume enclosed by the marching cubes 0.5 iso-contour triangle mesh of ρ. Our method conserves mass up to an arithmetic error. The volume generally stays close to the true value, but can decrease signiﬁcantly in some cases. For example, when the liquid ball spreads out on the ﬂoor and becomes thinner than the grid spacing or when the ratio of surface area to volume is large. In Proc. 4th ASME-JSME Joint Fluids Eng. Conf., number FEDSM2003 ˝U45144. ASME (2003), pp. 2003–45144. 6 [FF01] FOSTER N., FEDKIW R.: Practical animation of liquids. In Proc. SIGGRAPH (Aug. 2001), pp. 23–30. 1, 2 [FM96] FOSTER N., METAXAS D.: Realistic animation of liq- uids. Graph. Models Image Process. 58, 5 (1996), 471–483. 2 [FOA03] FELDMAN B. E., O’BRIEN J. F., ARIKAN O.: Animat- ing suspended particle explosions. In the Proceedings of ACM SIGGRAPH 2003 (July 2003), pp. 708–715. 2 [HK10] HEO N., KO H.-S.: Detail-preserving fully-eulerian in- terface tracking framework. ACM Trans. Graph. 29 (December 2010), 176:1–176:8. 2 [HN81] HIRT C. W., NICHOLS B. D.: Volume of ﬂuid (VOF) method for the dynamics of free boundaries. Journal of Compu- tational Physics 39, 1 (Jan. 1981), 201–225. 2 [HW65] HARLOW F., WELCH J.: Numerical calculation of time- dependent viscous incompressible ﬂow of ﬂuid with a free sur- face. The Physics of Fluids 8 (1965), 2182–2189. 3 [ISF07] IRVING G., SCHROEDER C., FEDKIW R.: Volume con- serving ﬁnite element simulations of deformable models. In ACM SIGGRAPH 2007 papers (New York, NY, USA, 2007), SIG- GRAPH ’07, ACM. 2 [JRW07] JEONG W.-K., ROSS, WHITAKER T.: A fast eikonal equation solver for parallel systems. In SIAM conference on Computational Science and Engineering (2007). 3 [KLL∗07] KIM B., LIU Y., LLAMAS I., JIAO X., ROSSIGNAC J.: Simulation of bubbles in foam with the volume control method. ACM Trans. Graph. 26 (July 2007). 2, 5 [KLLR05] KIM B., LIU Y., LLAMAS I., ROSSIGNAC J.: Flow- ﬁxer: Using bfecc for ﬂuid simulation. In NPH (2005), pp. 51– 56. 2 [KPyNS10] KANG N., PARK J., YONG NOH J., SHIN S. Y.: A hybrid approach to multiple ﬂuid simulation using volume frac- tions. Comput. Graph. Forum 29, 2 (2010), 685–694. 2 [KSK08] KIM D., SONG O.-Y., KO H.-S.: A semi-lagrangian cip ﬂuid solver without dimensional splitting. Computer Graph- ics Forum 27, 2 (April 2008), 467–475. 2 [LAF11] LENTINE M., AANJANEYA M., FEDKIW R.: Mass and momentum conservation for ﬂuid simulation. In Proceedings of the 2011 ACM SIGGRAPH/Eurographics Symposium on Com- puter Animation (New York, NY, USA, August 2011), SCA ’11, ACM, pp. 91–100. 1, 2, 3, 4 [LC87] LORENSEN W. E., CLINE H. E.: Marching cubes: A high resolution 3d surface construction algorithm. SIGGRAPH Comput. Graph. 21 (August 1987), 163–169. 7 [LGF11] LENTINE M., GRÉTARSSON J. T., FEDKIW R.: An un- conditionally stable fully conservative semi-lagrangian method. J. Comput. Phys. 230 (April 2011), 2857–2879. 2, 3, 4 [LR09] LONG B., REINHARD E.: Real-time ﬂuid simulation us- ing discrete sine/cosine transforms. In Proc. ACM SIGGRAPH symposium on Interactive 3D Graphics and Games (2009), pp. 99–106. 2 [M¨09] MÜLLER M.: Fast and robust tracking of ﬂuid surfaces. In Proc. ACM SIGGRAPH/Eurographics Symposium on Computer Animation (2009). 2 [MCG03] MÜLLER M., CHARYPAR D., GROSS M.: Particle- based ﬂuid simulation for interactive applications. In ACM c⃝ The Eurographics Association 2012. Nuttapong Chentanez & Matthias Müller / Mass-Conserving Eulerian Liquid Simulation Figure 11: Simulation of a solid duck moving across a liquid tank at high speed, sloshing the liquid up in the air on a grid of 256x128x128 cells. SIGGRAPH/Eurographics Symposium on Computer Animation (2003), pp. 154–159. 2 [MF] MOKBERI E., FALOUTSOS P.: A particle level set library. 7 [MMTD07] MULLEN P., MCKENZIE A., TONG Y., DESBRUN M.: A variational approach to eulerian geometry processing. In ACM SIGGRAPH 2007 papers (New York, NY, USA, 2007), SIGGRAPH ’07, ACM. 1, 2, 3, 5, 6 [PP04] PILLIOD JR. J. E., PUCKETT E. G.: Second-order accu- rate volume-of-ﬂuid algorithms for tracking material interfaces. J. Comput. Phys. 199, 2 (Sept. 2004), 465–502. 2 [PTB∗03] PREMOZE S., TASDIZEN T., BIGLER J., LEFOHN A. E., WHITAKER R. T.: Particle-based simulation of ﬂuids. Comput. Graph. Forum 22, 3 (2003), 401–410. 2 [SFK∗08] SELLE A., FEDKIW R., KIM B., LIU Y., ROSSIGNAC J.: An unconditionally stable MacCormack method. J. Sci. Com- put. 35, 2-3 (2008), 350–371. 2 [SG11] SOLENTHALER B., GROSS M.: Two-scale particle sim- ulation. ACM Trans. Graph. 30 (Aug. 2011), 81:1–81:8. 2 [SHA11] SO K. K., HU X. Y., ADAMS N. A.: Anti-diffusion method for interface steepening in two-phase incompressible ﬂow. J. Comput. Phys. 230, 13 (June 2011), 5155–5177. 8 [SP00] SUSSMAN M., PUCKETT E. G.: A coupled level set and volume-of-ﬂuid method for computing 3d and axisymmetric in- compressible two-phase ﬂows. J. Comput. Phys. 162, 2 (Aug. 2000), 301–337. 2 [SP09] SOLENTHALER B., PAJAROLA R.: Predictive-corrective incompressible sph. In Proc. SIGGRAPH (2009), pp. 1–6. 2 [Sta99] STAM J.: Stable ﬂuids. In Proc. SIGGRAPH (Aug. 1999), pp. 121–128. 2 [TR04] THÜREY N., RÜDE U.: Free Surface Lattice-Boltzmann ﬂuid simulations with and without level sets. Proc. of Vision, Modelling, and Visualization VMV (2004), 199–207. 2 [TR09] THÜREY N., RÜDE U.: Stable free surface ﬂows with the lattice Boltzmann method on adaptively coarsened grids. Com- puting and Visualization in Science 12 (5) (2009). 2 [WMFB11] WOJTAN C., MÜLLER-FISCHER M., BROCHU T.: Liquid simulation with mesh-based surface tracking. In ACM SIGGRAPH 2011 Courses (New York, NY, USA, 2011), SIG- GRAPH ’11, ACM, pp. 8:1–8:84. 1 [WTGT10] WOJTAN C., THÜREY N., GROSS M., TURK G.: Physics-inspired topology changes for thin ﬂuid features. In Proc. SIGGRAPH (2010), no. 4, pp. 1–8. 2 [YT10] YU J., TURK G.: Enhancing ﬂuid animation with adap- tive, controllable and intermittent turbulence. In Proc. ACM SIGGRAPH/Eurographics Symposium on Computer Animation (2010). 2 [ZB05] ZHU Y., BRIDSON R.: Animating sand as a ﬂuid. In Proc. SIGGRAPH (2005), pp. 965–972. 2 c⃝ The Eurographics Association 2012.","libVersion":"0.2.2","langs":""}