{"path":".obsidian/plugins/text-extractor/cache/4c35b43f651fa08582020d21dbc97044.json","text":"To appear in ACM TOG 32(4). Position Based Fluids Miles Macklin ∗ Matthias M¨uller † NVIDIA Abstract In ﬂuid simulation, enforcing incompressibility is crucial for real- ism; it is also computationally expensive. Recent work has im- proved efﬁciency, but still requires time-steps that are impractical for real-time applications. In this work we present an iterative den- sity solver integrated into the Position Based Dynamics framework (PBD). By formulating and solving a set of positional constraints that enforce constant density, our method allows similar incom- pressibility and convergence to modern smoothed particle hydro- dynamic (SPH) solvers, but inherits the stability of the geometric, position based dynamics method, allowing large time steps suit- able for real-time applications. We incorporate an artiﬁcial pressure term that improves particle distribution, creates surface tension, and lowers the neighborhood requirements of traditional SPH. Finally, we address the issue of energy loss by applying vorticity conﬁne- ment as a velocity post process. CR Categories: I.3.5 [Computer Graphics]: Computational Geometry and Object Modeling—Physically based modeling I.3.7 [Computer Graphics]: Three-Dimensional Graphics and Realism— Animation; Keywords: ﬂuid simulation, SPH, PCISPH, constraint ﬂuids, po- sition based dynamics 1 Introduction Fluids, in particular liquids such as water, are responsible for many visually rich phenomena, and simulating them has been an area of long-standing interest and challenge in computer graphics. There are a variety of techniques available, but here we focus on particle methods, which are popular for their simplicity and ﬂexibility. Smoothed Particle Hydrodynamics (SPH) [Monaghan 1992][1994] is a well known particle based method for ﬂuid simulation. It has many attractive properties: mass-conservation, Lagrangian dis- cretization (particularly useful in games where the simulation do- main is not necessarily known in advance), and conceptual simplic- ity. However, SPH is sensitive to density ﬂuctuations from neigh- borhood deﬁciencies, and enforcing incompressibility is costly due to the unstructured nature of the model. Recent work has im- proved efﬁciency by an order of magnitude [Solenthaler and Pa- jarola 2009], but small time steps remain a requirement, limiting real-time applications. ∗e-mail:mmacklin@nvidia.com †e-mail:matthiasm@nvidia.com (a) Real-time rendered ﬂuid surface using ellipsoid splatting (b) Underlying simulation particles Figure 1: Bunny taking a bath. 128k particles, 2 sub-steps, 3 den- sity iterations per frame, average simulation time per frame 10ms. For interactive environments, robustness is a key issue: the simula- tion must handle degenerate situations gracefully. SPH algorithms often become unstable if particles do not have enough neighbors for accurate density estimates. The typical solution is to try to avoid these situations by taking sufﬁciently small time steps, or by using sufﬁciently many particles, at the cost of increased computation. In this paper, we show how incompressible ﬂow can be simulated inside the Position Based Dynamics (PBD) framework [M¨uller et al. 2007]. We choose PBD for its unconditionally stable time integration and robustness, which has made it popular with game developers and ﬁlm makers. By addressing the issue of particle deﬁciency at free surfaces, and handling large density errors, our method allows users to trade incompressibility for performance, while remaining stable. 2 Related Work M¨uller [2003] showed that SPH can be used for interactive ﬂuid simulation with viscosity and surface tension, by using a low stiff- ness equation of state (EOS). However to maintain incompressibil- ity, standard SPH or weakly compressible SPH (WCSPH) [Becker and Teschner 2007] require stiff equations, resulting in large forces that limit the time-step size. Predictive-corrective incompressible SPH (PCISPH) [Solenthaler and Pajarola 2009] relaxes this time- step restriction by using an iterative Jacobi-style method that accu- mulates pressure changes and applies forces until convergence. It has the advantage of not requiring a user-speciﬁed stiffness value and of amortizing the cost of neighbor ﬁnding over many density 1 To appear in ACM TOG 32(4). corrections. Bodin et al [2012] achieve uniform density ﬂuid by posing incom- pressibility as a system of velocity constraints. They construct a linear complementarity problem using linearized constraint func- tions, which are solved using Gauss-Seidel iteration. In contrast, our method (and PCISPH) attempts to solve the non-linear problem by operating on particles directly, and re-evaluating constraint error and gradients each Jacobi iteration. Hybrid methods, such as Fluid Implicit-Particle (FLIP) [Brackbill and Ruppel 1986] use a grid for the pressure solve and transfer ve- locity changes back to particles. FLIP was later extended to in- compressible ﬂow with free surfaces by Zhu and Bridson [2005]. Raveendran et al. [2011] use a coarse grid to solve for an approx- imately divergence free velocity ﬁeld before an adaptive SPH up- date. Clavet et al. [2005] also use a position based approach to simu- late viscoelastic ﬂuids. However, because the time step appears in various places of their position projections, their approach is only conditionally stable as in regular explicit integration. Position Based Dynamics [M¨uller et al. 2007] provides a method for simulating dynamics in games based on Verlet integration. It solves a system of non-linear constraints using Gauss-Seidel itera- tion by updating particle positions directly. By eschewing forces, and deriving momentum changes implicitly from the position up- dates, the typical instabilities associated with explicit methods are avoided. 3 Enforcing Incompressibility To enforce constant density we solve a system of non-linear con- straints, with one constraint per-particle. Each constraint is a func- tion of the particle’s position and the positions of its neighbors, which we refer to collectively as p1, · · · , pn. Following [Bodin et al. 2012] the density constraint on the ith particle is deﬁned using an equation of state: Ci(p1, ..., pn) = ρi ρ0 − 1, (1) where ρ0 is the rest density and ρi is given by the standard SPH density estimator: ρi = ∑ j m jW (pi − p j, h). (2) We treat all particles as having equal mass and will drop this term from subsequent equations. In our implementation we use the Poly6 kernel for density estimation, and the Spiky kernel for gradi- ent calculation, as in [M¨uller et al. 2003]. Now we give some background on the position based dynamics method and then show how to incorporate our density constraint. PBD aims to ﬁnd a particle position correction ∆p that satisﬁes the constraint: C(p + ∆p) = 0 (3) This is found by a series of Newton steps along the constraint gra- dient: ∆p ≈ ∇C(p)λ (4) C(p + ∆p) ≈ C(p) + ∇CT ∆p = 0 (5) ≈ C(p) + ∇CT ∇Cλ = 0. (6) Algorithm 1 Simulation Loop 1: for all particles i do 2: apply forces vi ⇐ vi + ∆tfext (xi) 3: predict position x∗ i ⇐ xi + ∆tvi 4: end for 5: for all particles i do 6: ﬁnd neighboring particles Ni(x∗ i ) 7: end for 8: while iter < solverIterations do 9: for all particles i do 10: calculate λi 11: end for 12: for all particles i do 13: calculate ∆pi 14: perform collision detection and response 15: end for 16: for all particles i do 17: update position x∗ i ⇐ x∗ i + ∆pi 18: end for 19: end while 20: for all particles i do 21: update velocity vi ⇐ 1 ∆t ( x∗ i − xi) 22: apply vorticity conﬁnement and XSPH viscosity 23: update position xi ⇐ x∗ i 24: end for [Monaghan 1992] gives the SPH recipe for the gradient of a func- tion deﬁned on the particles. Applying this, the gradient of the constraint function (1) with respect to a particle k is given by: ∇pkCi = 1 ρ0 ∑ j ∇pkW (pi − p j, h) (7) Which has two different cases based on whether k is a neighboring particle or not: ∇pkCi = 1 ρ0    ∑ j ∇pkW (pi − p j, h) if k = i −∇pkW (pi − p j, h) if k = j (8) Plugging this into (6) and solving for λ gives λi = −Ci(p1, ..., pn) ∑k \f \f∇pkCi\f \f2 (9) which is the same for all particles in the constraint. Because the constraint function (1) is non-linear, with a vanish- ing gradient at the smoothing kernel boundary, the denominator in equation (9) causes instability when particles are close to separat- ing. As in PCISPH this can be solved by pre-computing a conser- vative corrective scale based on a reference particle conﬁguration with a ﬁlled neighborhood. Alternatively, constraint force mixing (CFM) [Smith 2006] can be used to regularize the constraint. The idea behind CFM is to soften the constraint by mixing in some of the constraint force back into the constraint function, in the case of PBD this changes (6) to C(p + ∆p) ≈ C(p) + ∇CT ∇Cλ + ελ = 0. (10) Where ε is a user speciﬁed relaxation parameter that is constant over the simulation. The scaling factor is now λi = − Ci(p1, ..., pn) ∑k \f \f∇pkCi\f \f2 + ε , (11) 2 To appear in ACM TOG 32(4). and the total position update ∆pi including corrections from neigh- bor particles density constraint (λ j) is ∆pi = 1 ρ0 ∑ j ( λi + λ j) ∇W (pi − p j, h). (12) Figure 2: Armadillo Splash, Top: particle clumping due to neigh- bor deﬁciencies, Bottom: with artiﬁcial pressure term, note the im- proved particle distribution and surface tension. 4 Tensile Instability A common problem in SPH simulations is particle clustering or clumping caused by negative pressures when a particle has only a few neighbors and is unable to satisfy the rest density (Figure 2). This may be avoided by clamping pressures to be non-negative, but at the cost of reduced particle cohesion. Clavet et al. [2005] use a second ’near pressure’ term, while Alduan and Otaduy [2011] use discrete element (DEM) forces [Bell et al. 2005] to push apart particles closer than half the smoothing kernel width. Schechter and Bridson [2012] place ghost particles around the free surface to ensure consistent density estimates. We follow the approach of [Monaghan 2000] which adds an arti- ﬁcial pressure speciﬁed in terms of the smoothing kernel itself as scorr = −k (W (pi − p j, h) W (∆q, h) )n , (13) where ∆q is a point some ﬁxed distance inside the smoothing kernel radius and k is a small positive constant. |∆q| = 0.1h · · · 0.3h, k = 0.1 and n = 4 work well. We then include this term in the particle position update as ∆pi = 1 ρ0 ∑ j ( λi + λ j + scorr) ∇W (pi − p j, h). (14) This purely repulsive term keeps particle density slightly lower than the rest density. Consequently, particles pull their neighbors in- wards causing surface tension-like effects similar to the ones de- scribed in [Clavet et al. 2005]. We note that this effect is a non- physical artifact of the anti-clustering term and requires a trade off between clustering errors and surface tension strength. Without clustering problems our algorithm is free from the rule of thumb that in SPH a particle must have 30-40 neighbors at all times, improving efﬁciency. 5 Vorticity Conﬁnement and Viscosity Position based methods introduce additional damping which is of- ten undesirable. Fedkiw et al. [2001] introduced vorticity conﬁne- ment to computer graphics to address numerical dissipation in the simulation of smoke, which was later extended to energy conserv- ing ﬂuid simulation in [Lentine et al. 2011]. In Bubbles Alive, Hong et al. [2008] show how vorticity conﬁnement can be used in a hy- brid setup where by vorticity is transferred from a grid to the SPH particles to introduce turbulent motion. We optionally use vorticity conﬁnement to replace lost energy (Fig- ure 5). This requires ﬁrst calculating the vorticity at a particle’s lo- cation, for which we use the estimator given in [Monaghan 1992]: ω i = ∇ × v = ∑ j vi j × ∇p jW (pi − p j, h) (15) where vi j = v j − vi. Once we have the vorticity we calculate a corrective force using the location vector N = η |η| with η = ∇|ω|i f vorticity i = ε (N × ω i) . (16) Unlike [Hong et al. 2008] we do not use normalized ω as this would increase vorticity indiscriminately. Instead we use the unnormal- ized value, which only adds vorticity where it already exists, as in [Fedkiw et al. 2001]. In addition, we apply XSPH viscosity [Schechter and Bridson 2012], which is important for coherent motion. The parameter c is typically chosen to be 0.01 in our simulations: v new i = vi + c∑ j vi j ·W (pi − p j, h) (17) 6 Algorithm Our simulation loop is outlined in Algorithm 1. It is similar to the original Position Based Dynamics update except that each con- straint is solved independently in a Jacobi fashion, rather than through sequential Gauss-Seidel iteration. We perform collision de- tection against solids as part of the constraint solving loop. We recompute particle neighborhoods once per-step and re- calculate distance and constraint values each solver iteration. This optimization can lead to density underestimates, for example if a particle separates from the initial set of neighbors. In PCISPH this can cause serious problems, once a particle becomes isolated, each iteration makes its pressure increasingly negative. If it then comes back into contact on a subsequent iteration, large erroneous pres- sure forces are applied. Our algorithm considers only the current particle positions (not accumulated pressure), so this does not oc- cur. 3 To appear in ACM TOG 32(4). Figure 3: Dropping a liquid bunny into a pool of water (80k parti- cles). (a) Average Density (b) Maximum Density Figure 4: Density over the bunny drop simulation. Our algorithm maintains compressibility similar to PCISPH at time-steps more than twice as large. Color key: Blue, rest density. Red, PCISPH. Green, our method. 7 Rendering Real-time ﬂuid surfacing is performed using a GPU based ellipsoid splatting technique. Particle anisotropy is ﬁrst computed using the method of Yu and Turk [2013], and the surface is reconstructed using a method based on the screen-space ﬁltering presented in [van der Laan et al. 2009]. 8 Results We tested our algorithm by dropping a liquid bunny into a pool of water (Figure 3) and compared our results with a PCISPH imple- mentation. For this scenario PCISPH is not stable with less than 10 sub-steps per frame (∆t = 0.0016s). In contrast our algorithm is stable with a single step (∆t = 0.016s). To compare compressibility we run PCISPH with 10 sub-steps and 4 pressure iterations, and our algorithm with 4 sub-steps and 10 iterations per sub-step, so that each performs 40 pressure iterations per-frame in total. The point of this comparison is to show that our method can achieve comparable results with larger time-steps, allowing us to amortize the per-step costs of grid construction and neighbor ﬁnding over more density iterations. Our results are in good accordance, and a plot of density over the simulation conﬁrms that the level of compression is similar despite the larger time-step for our method (Figure 4). Tables 1 and 2 sum- marize the performance of our algorithm in a selection of scenarios. Because we are interested in real-time applications with predictable performance, we set the number of iterations to a ﬁxed value (typ- ically 2-4) rather than solving for a speciﬁc error threshold. How- ever, we also show the convergence of our method over multiple iterations in Figure 6. We implemented our algorithm in CUDA and ran our simulations on an NVIDIA GTX 680. Each stage of our algorithm is fully par- allelizable so we are able to take advantage of parallel architec- tures such as GPUs. For neighbor ﬁnding we use the method of [Green 2008]. We also perform particle-solid collision detection on the GPU where we use signed distance ﬁelds [Bridson et al. 2006] stored as volume textures. 9 Limitations and Future Work Occasionally particle stacking along boundaries can occur due to incorrect density estimates when particles are in contact with solids. Recent work by Akinci et al. [2012] would help address this issue. Jacobi methods only propagate information (in our case position corrections) between a particle’s immediate neighbors each itera- tion. This can lead to slow convergence as the number of particles increases. More sophisticated parallel solvers such as red-black or multi-scale schemes such as [Solenthaler and Gross 2011] should help improve convergence speed. Because our artiﬁcial pressure term is dependent on the spatial res- olution and time-step it can be difﬁcult to adjust parameters inde- pendently. Decoupling these parameters and making anti-clustering independent from surface tension effects would be important future work. Position based dynamics is popular for simulating deformable ob- jects such as cloth. We have prototyped two-way interaction be- tween position based cloth and ﬂuid with promising results. Table 1: Performance results for several examples. A frame time of 16ms is used in all cases. Scene particles steps/frame iters/step time/step [ms] Armadillo Splash 128k 2 3 4.2 Dam Break 100k 4 3 4.3 Bunny Drop 80k 4 10 7.8 Table 2: Breakdown of a frame (percentages) for two examples. Constraint Solve includes collision handling with static objects, and Velocity Update includes vorticity conﬁnement and viscosity calcu- lation. Step Armadillo Splash Dam Break Integrate 1 1 Create Hash Grid 8 6 Detect Neighbors 28 28 Constraint Solve 38 51 Velocity Update 25 14 10 Acknowledgments The authors would like to thank NVIDIA for supporting our re- search, especially Nuttapong Chentanez, Tae-Yong Kim and Simon Schirm for their valuable feedback, Simon Green for his rendering work, and Adam Moravanszky and Christian Sigg for their encour- agement. We also wish to thank the anonymous reviewers for their generous comments and suggestions. The Bunny and Armadillo 4 To appear in ACM TOG 32(4). models are used courtesy of the Stanford Computer Graphics Lab- oratory. Figure 5: Dam break scenario at t=6.0, Left: vorticity conﬁne- ment disabled. Right: vorticity conﬁnement enabled, note the visi- bly higher splash. Figure 6: Convergence of our method over multiple iterations at t = 1.0 in the dam break scenario. References AKINCI, N., IHMSEN, M., AKINCI, G., SOLENTHALER, B., AND TESCHNER, M. 2012. Versatile rigid-ﬂuid coupling for incom- pressible sph. ACM Trans. Graph. 31, 4 (July), 62:1–62:8. ALDU ´AN, I., AND OTADUY, M. A. 2011. Sph granular ﬂow with friction and cohesion. In Proceedings of the 2011 ACM SIGGRAPH/Eurographics Symposium on Computer Animation, ACM, New York, NY, USA, SCA ’11, 25–32. BECKER, M., AND TESCHNER, M. 2007. Weakly compressible sph for free surface ﬂows. In Proceedings of the 2007 ACM SIG- GRAPH/Eurographics symposium on Computer animation, Eu- rographics Association, Aire-la-Ville, Switzerland, Switzerland, SCA ’07, 209–217. BELL, N., YU, Y., AND MUCHA, P. J. 2005. Particle-based sim- ulation of granular materials. In Proceedings of the 2005 ACM SIGGRAPH/Eurographics symposium on Computer animation, ACM, New York, NY, USA, SCA ’05, 77–86. BODIN, K., LACOURSIERE, C., AND SERVIN, M. 2012. Con- straint ﬂuids. IEEE Transactions on Visualization and Computer Graphics 18, 3 (Mar.), 516–526. BRACKBILL, J. U., AND RUPPEL, H. M. 1986. Flip: A method for adaptively zoned, particle-in-cell calculations of ﬂuid ﬂows in two dimensions. J. Comput. Phys. 65, 2 (Aug.), 314–343. BRIDSON, R., FEDKIW, R., AND M ¨ULLER-FISCHER, M. 2006. Fluid simulation: Siggraph 2006 course notes fedkiw and muller-ﬁscher presenation videos are available from the citation page. In ACM SIGGRAPH 2006 Courses, ACM, New York, NY, USA, SIGGRAPH ’06, 1–87. CLAVET, S., BEAUDOIN, P., AND POULIN, P. 2005. Particle- based viscoelastic ﬂuid simulation. In Proceedings of the 2005 ACM SIGGRAPH/Eurographics symposium on Computer ani- mation, ACM, New York, NY, USA, SCA ’05, 219–228. FEDKIW, R., STAM, J., AND JENSEN, H. W. 2001. Visual sim- ulation of smoke. In Proceedings of the 28th annual conference on Computer graphics and interactive techniques, ACM, New York, NY, USA, SIGGRAPH ’01, 15–22. GREEN, S. 2008. Cuda particles. nVidia Whitepaper 2, 3.2, 1. HONG, J.-M., LEE, H.-Y., YOON, J.-C., AND KIM, C.-H. 2008. Bubbles alive. In ACM SIGGRAPH 2008 papers, ACM, New York, NY, USA, SIGGRAPH ’08, 48:1–48:4. LENTINE, M., AANJANEYA, M., AND FEDKIW, R. 2011. Mass and momentum conservation for ﬂuid simulation. In Proceed- ings of the 2011 ACM SIGGRAPH/Eurographics Symposium on Computer Animation, ACM, New York, NY, USA, SCA ’11, 91– 100. MONAGHAN, J. J. 1992. Smoothed particle hydrodynamics. An- nual Review of Astronomy and Astrophysics 30, 1, 543–574. MONAGHAN, J. J. 1994. Simulating free surface ﬂows with sph. J. Comput. Phys. 110, 2 (Feb.), 399–406. MONAGHAN, J. J. 2000. Sph without a tensile instability. J. Comput. Phys. 159, 2 (Apr.), 290–311. M ¨ULLER, M., CHARYPAR, D., AND GROSS, M. 2003. Particle- based ﬂuid simulation for interactive applications. In Proceed- ings of the 2003 ACM SIGGRAPH/Eurographics symposium on Computer animation, Eurographics Association, Aire-la-Ville, Switzerland, Switzerland, SCA ’03, 154–159. M ¨ULLER, M., HEIDELBERGER, B., HENNIX, M., AND RAT- CLIFF, J. 2007. Position based dynamics. J. Vis. Comun. Image Represent. 18, 2 (Apr.), 109–118. RAVEENDRAN, K., WOJTAN, C., AND TURK, G. 2011. Hybrid smoothed particle hydrodynamics. In Proceedings of the 2011 ACM SIGGRAPH/Eurographics Symposium on Computer Ani- mation, ACM, New York, NY, USA, SCA ’11, 33–42. SCHECHTER, H., AND BRIDSON, R. 2012. Ghost sph for animat- ing water. ACM Trans. Graph. 31, 4 (July), 61:1–61:8. SMITH, R. 2006. Open dynamics engine v0.5 user guide. SOLENTHALER, B., AND GROSS, M. 2011. Two-scale particle simulation. ACM Trans. Graph. 30, 4 (July), 81:1–81:8. SOLENTHALER, B., AND PAJAROLA, R. 2009. Predictive- corrective incompressible sph. In ACM SIGGRAPH 2009 pa- pers, ACM, New York, NY, USA, SIGGRAPH ’09, 40:1–40:6. VAN DER LAAN, W. J., GREEN, S., AND SAINZ, M. 2009. Screen space ﬂuid rendering with curvature ﬂow. In Proceedings of the 2009 symposium on Interactive 3D graphics and games, ACM, New York, NY, USA, I3D ’09, 91–98. YU, J., AND TURK, G. 2013. Reconstructing surfaces of particle- based ﬂuids using anisotropic kernels. ACM Trans. Graph. 32, 1 (Feb.), 5:1–5:12. ZHU, Y., AND BRIDSON, R. 2005. Animating sand as a ﬂuid. In ACM SIGGRAPH 2005 Papers, ACM, New York, NY, USA, SIGGRAPH ’05, 965–972. 5","libVersion":"0.2.2","langs":""}